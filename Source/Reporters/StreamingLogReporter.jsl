// Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Names Default To Here( 0 );

/*
	Class: UtStreamingLogReporter
		---Prototype---
		class UtStreamingLogReporter inherits UtReporter
		---------------
		Output every success and failure to the log as they are received.
*/
Define Class("UtStreamingLogReporter",
	Base Class( "UtReporter" ),
	n assertions = 0;
	_init_ = Method({},
		this:n assertions = 0
	);
	add expression failure = Method( {label, payload=Empty()},
		add failure( label, "test expr", "is an expression", "was not an expression", Empty(), payload );
	);
	add failure = Method( {label, test expr, description, mismatch, lre, payload=Empty()},
		n assertions++;
		short description = If( Length( description ) > 40, Left( description, 30 ) || " ...", description );
		failure = "";
		failure ||= Eval Insert( "\!NFAILURE  Test #^n assertions^: ^Name Expr(test expr)^ ^short description^ (^label^) " );
		failure ||= Eval Insert( "\!N         Actual: ^mismatch^\!N       Expected: ^description^" );
		If( !Is Empty( LRE ), failure ||= Eval Insert( "\!N            LRE: ^LRE^" ));
		Write(failure);
	);
	add unexpected throw = Method( {label, test expr, description, exception, payload=Empty()},
		add failure( label, Name Expr( test expr ), description, "threw \!"" || ut get exception message(exception) || "\!"", Empty(), payload )
	);
	add success = Method( {label, test expr, description, payload=Empty()},
		n assertions++;
	);
	on run start = Method( {},
		this:n assertions = 0;
	);
	on run end = Method( {},
		.
	);
);

// Function: ut streaming log reporter
//   Factory for <UtFileAppendingReporter>.
ut streaming log reporter = Function({},
	New Object( "UtStreamingLogReporter" );
);