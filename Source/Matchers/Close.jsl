// Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Names Default To Here( 0 );

/* 
	Class: UtCloseMatcher
		---Prototype---
		class UtCloseMatcher inherits UtMatcher
		---------------
		
		Operates only on values (not on matchers). Treats missing values as
		normal JSL unless exactly equal. This behavior is to be consistent
		with <UtEqualToMatcher>.
*/
Define Class(
	"UtCloseMatcher",
	Base Class( Ut Matcher ),
	value = 0;
	delta = 0;
	_init_ = Method( {value, delta},
		this:value = value;
		this:delta = delta;
	);
	matches = Method( {test expr},
		actual = test expr;
		success = If(
			Is Missing( actual ) & Is Missing( this:value ), 1,
			!Is Missing( actual ) & !Is Missing( this:value ),
				actualDelta = Abs( actual - this:value );
				actualDelta <= this:delta,
			actualDelta = .;
			0;
		);
		If( success,
			::ut match info success(),
			mismatch = Char( actual ) || " was within " || Char( actualDelta );
			LRE = ::ut global lre( actual, this:value );
			::ut match info failure( mismatch, LRE );
		);
	);
	describe = Method( {},
		"a value within " || Char( this:delta ) || " of " || Char( this:value )
	);
);

// Section: Globals

/* 
	Function: ut close to
		---Prototype---
		ut close to( number value, number delta )
		---------------
		Returns a success if the actual value is within the
		delta of the expected value.
		
		Factory function for <UtCloseMatcher>.

	Arguments:
		value - value to be close to
		delta - how close is acceptable (+ or -)

	Example:
		> ut assert that( Expr( 5 + 5 ), ut close to( 10, 0.01 ) );
*/
ut matcher factory( "ut close to" );
ut close to = Function( {val, delta},
	If( Is Number( val ) & Is Number(delta),
		New Object( UtCloseMatcher( val, delta ) ),
		Throw( "Both value and delta arguments for ut close to() must be numeric." )
	)
);
