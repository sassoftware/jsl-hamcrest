// Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Names Default To Here( 0 );

/*
	Class: UtApproxMatcher
		---Prototype---
		class UtApproxMatcher inherits UtMatcher
		---------------
*/
Define Class(
	"UtApproxMatcher",
	Base Class( UtMatcher ),
	value = .;
	zero epsilon = .;
	relative epsilon = .;
	
	_init_ = Method({value, zero epsilon, relative epsilon},
		this:value = value;
		this:zero epsilon = zero epsilon;
		this:relative epsilon = relative epsilon;
	);
	matches = Method( {test expr},
		actual = test expr;
		
		If( 
			Type( Name Expr( value ) ) != Type( Name Expr( actual ) ),
				ut match info failure( Eval Insert( "^Name Expr( value )^ was not correct type" ) ),
			Is Number( value ),
				this:approx number( actual, value, this:relative epsilon ),
			Is Matrix( value ),
				this:approx matrix( actual, value ),
			// else?
				ut match info failure( "was " || Char( actual ) )
		)
		
	);
	
	approx number = Method({actual, expected, relativeEpsilon},
		// allow for small errors in numeric results due to machine precision limits
		If(
			ut is numeric missing( actual ) & ut is numeric missing( expected ),
				ut match info success();
		,
			ut is numeric missing( actual ) != ut is numeric missing( expected ),
				ut match info failure( Eval Insert( "was ^actual^" ), . );
		,
			expected == 0,
				IfMZ( Abs( actual ) < this:zero epsilon,
					ut match info success(),
					ut match info failure( 
						Eval Insert( "^actual^ was not within zero epsilon" ), 
						ut global lre( actual, expected )
					)
				);
		,
			actual == 0,
				IfMZ( Abs( expected ) < this:zero epsilon,
					ut match info success(),
					ut match info failure( 
						Eval Insert( "^actual^ was not within zero epsilon" ), 
						ut global lre( actual, expected )
					)
				);
		,     
			// Else
				IfMZ( Abs( actual - expected ) / Abs( expected ) < relativeEpsilon,
					ut match info success(),
					ut match info failure( 
						Eval Insert( "^actual^ was not within relative epsilon" ), 
						ut global lre( actual, expected )
					)
				);
		);
	);
	
	approx matrix = Method({expected, actual},		
		If( N Row( actual ) == N Row( expected ) & N Col( actual ) == N Col( expected ),
			re = If( Is Number( this:relative epsilon ),
				J( N Row( this:value ), N Col( this:value ), this:relative epsilon ),
				this:relative epsilon
			);
			// need to compare values individually
			For(rr = 1, rr <= N Row( actual ), rr++,
				For(cc = 1, cc <= N Col( actual ), cc++,
					match info = this:approx number( actual[rr, cc], expected[rr,cc], re[rr,cc] );
					If( !match info:success,
						Return( 
							ut match info failure( Eval Insert( "^match info:mismatch^ at position [^rr^, ^cc^] within ^actual^" ), ut global lre( expected, actual ) );
						);
					);
				);
			);
			ut match info success();
		,
			ut match info failure( "mismatched size" );
		);
	);
	
	describe = Method( {},
		Eval Insert( "\[approximately ^this:value^ where zero epsilon=^Format( this:zero epsilon, "Scientific" )^, relative epsilon=^Format( this:relative epsilon, "Scientific" )^]\" )
	);
);

/*
	Class: UtApproxMatcher
		---Prototype---
		class UtApproxMatcher inherits UtMatcher
		---------------
*/
Define Class(
	"UtApproxDigitsMatcher",
	Base Class( UtApproxMatcher ),
	digits = .;
	_init_ = Method({value, digits},
		this:value = value;
		this:digits = digits;
		this:zero epsilon = 5*10^(-digits);
		this:relative epsilon = 1e-9; // should be overwritten
		
		If(
			Is Number( value ), 
				this:relative epsilon = 5 * 10 ^ (Floor( Log10( Abs( val ) ) ) - digits) / Abs( val );
		,
			Is Matrix( value ),
				midx = Loc( value != 0 );
				this:relative epsilon = J( N Row( value ), N Col( value ), . );
				this:relative epsilon[midx] = 5 * 10 ^ (Floor( Log10( Abs( value[midx] ) ) ) - digits) :/ Abs( value[midx] );
		)
	);
	
	describe = Method({},
		Eval Insert( "approximately ^this:value^ where digits=^this:digits^" )
	);
);

/*	Class: UtMinLREMatcher
		---Prototype---
		class UtMinLREMatcher inherits UtMatcher
		---------------
*/
Define Class(
	"UtMinLREMatcher",
	Base Class( UtMatcher ),
	value = .;
	min lre = .;
	
	_init_ = Method({value, min lre},
		this:value = value;
		this:min lre = min lre;
	);
	
	matches = Method( {test expr},
		actual = test expr;
		
		// compare calculated LRE to the value of ut minimum LRE:
		lre = ut global lre( actual, this:value );
		IfMZ( All( lre >= this:min lre ),
			ut match info success(),
			ut match info failure( Eval Insert( "^actual^ has LRE value less than ^this:min lre^" ), lre );
		);
	);
	
	describe = Method({},
		Eval Insert( "approximately ^this:value^ with minLRE=^this:min lre^" )
	);
);

// Section: Globals

/* 
	Function: ut approx
		---Prototype---
		ut approx( number val, List options )
		---------------
		Returns a success if the relative difference between expected and 
		actual is within the relative epsilon for non-zero values and within 
		zero epsilon if the expected or actual value is 0.
		
		Works only on numbers and matrices.
		
		Factory function for <UtApproxMatcher>.

	Arguments:
		val - value to be near
		options - optional list of Zero Epsilon and/or Relative Epsilon. Defaults: Zero Epsilon=1e-12, Relative Epsilon=1e-9

	Example:
		---JSL---
		ut assert that( Expr( 5 + 5 ), ut approx( 10.000000001 ) );
		ut assert that( Expr( 5 + 5 ), ut approx( 10.0001, {Relative Epsilon( 1e-5 )} ) );
		ut assert that( Expr( 0 + 0 ), ut approx( 0.1, {Zero Epsilon( .2 )} ) );
		---------
*/
ut matcher factory( "ut approx" );
ut approx = Function( {val, options={Zero Epsilon( 1e-12 ), Relative Epsilon( 1e-9 )}},
	{ze, re},
	If( 
		!Is Number( Name Expr( val ) ) & !Is Matrix( Name Expr( val ) ),
			Throw("First argument for ut approx() must be a number or matrix." );
	,
		!Is List( options ), 
			Throw("Second argument for ut approx() must be a list." );
	);
	ze = Try( options["Zero Epsilon"], 1e-12 );
	re = Try( options["Relative Epsilon"], 1e-9 );
	
	If( Is Matrix( val ) & Is Matrix( re ),
		If( !(N Col( val ) == N Col( re ) & N Row( val ) == N Row( re ) ),
			Throw( "When the expected value and Relative Epsilon are both matrices, they must be the same size." )
		);
	);
	
	New Object( UtApproxMatcher( val, ze, re ) );
);

/* 
	Function: ut approx digits
		---Prototype---
		ut approx digits( number val, number digits )
		---------------
		Returns a success if the actual value matches the expected value up to 
		N digits.
		
		Works only on numbers and matrices.
		
		Factory function for <UtApproxMatcher>.

	Arguments:
		val - value to be near
		digits - number of digits. can also be a matrix.

	Example:
		---JSL---
		ut assert that( Expr( 5 + 5 ), ut approx digits( 10.001, 4 ) );
		ut assert that( Expr( 0 + 0 ), ut approx digits( 0.1, 1 ) );
		ut assert that( expr( [5] + [5] ), ut approx digits( [10.1], [2] ) )
		---------
*/
ut matcher factory( "ut approx digits" );
ut approx digits = Function({val, digits},
	
	If( 
		!Is Number( Name Expr( val ) ) & !Is Matrix( Name Expr( val ) ), 
			Throw("First argument for ut approx digits() must be a number or matrix." );
	,
		!Is Number( Name Expr( digits ) ) & !Is Matrix( Name Expr( digits ) ),
			Throw("Second argument for ut approx digits() must be a matrix or number of digits." )
	);
	
	New Object( UtApproxDigitsMatcher( val, digits ) );
);

/* 
	Function: ut min lre
		---Prototype---
		ut min lre( number val, number minLRE )
		---------------
		Returns a success if 
		
		Works only on numbers and matrices.
		
		Factory function for <UtApproxMatcher>.

	Arguments:
		val - value to be near
		minLRE - minimum LRE to consider a passing value. can also be a matrix.

	Example:
		---JSL---
		ut assert that( Expr( 5 + 5 ), ut min lre( 10.1, 2 ) );
		---------
*/
ut matcher factory( "ut min lre" );
ut min lre = Function({val, mLRE},
	If( 
		!Is Number( Name Expr( val ) ) & !Is Matrix( Name Expr( val ) ),
			Throw("First argument for ut min lre() must be a number or matrix." );
	,
		!Is Number( Name Expr( mLRE ) ) & !Is Matrix( Name Expr( mLRE ) ),
			Throw("Second argument for ut min lre() must be a number or matrix." );
	);
	New Object( UtMinLREMatcher( val, mLRE ) )
);
