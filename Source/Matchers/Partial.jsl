// Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Names Default To Here( 0 );

/*
	Class: UtPartialMatcher
		---Prototype---
		class UtPartialMatcher inherits UtMatcher
		---------------
		Operates only on string or list values (not on matchers). 
*/
Define Class(
	"UtPartialMatcher",
	Base Class( UtMatcher ),
	value = "";
	comparison function = Empty();
	comparison description = "";
	_init_ = Method( {comparison function, comparison description},
		this:comparison function = Parse( comparison function );
		this:comparison description = comparison description;
	);
	matches = Method( {test expr},
		actual = test expr;
		
		// If actual is a list, it doesn't matter what value is (it can be an expr, number, string, etc)
		If( // If actual value is a string, the ends with value must also be a string
			Is String( Name Expr( actual ) ) & !Is String( Name Expr( this:value ) ) |
			// actual value needs to be either a string or a list. 
			!(Is String( Name Expr( actual ) ) | Is List( Name Expr( actual ) ) )
		,
				mismatch = "was " || ut get show string( Name Expr( actual ) ) || " and type mismatch";
				::ut match info failure( mismatch );
		,
			this:comparison function( Name Expr( actual ), Name Expr( this:value ) ),
				::ut match info success();
		,
			// else
				mismatch = "was " || ut get show string( Name Expr( actual ) );
			
				::ut match info failure( mismatch );
		);
	);
	describe = Method( {},
		this:comparison description || " " || ut get show string( Name Expr( this:value ) )
	);
);

// Section: Globals

/* 
	Function: ut starts with
		---Prototype---
		ut starts with( object value )
		---------------
		Asserts using the Starts With() built-in function.
		
		Factory function for <UtPartialMatcher>.

	Arguments:
		value - should be a string or list

	Examples:
		> ut assert that( Expr( {1, 2, 3} ), ut starts with( {1,2} ) );
		> ut assert that( Expr( "Test" || "string" ), ut starts with( "Tests" ) );
*/
ut matcher factory( "ut starts with" );
ut starts with = Function( {val},
	{obj},
	obj = New Object( UtPartialMatcher( "Starts With", "starts with" ) );
	obj:value = Name Expr( val );
	obj;
);

/*
	Function: ut ends with
		---Prototype---
		ut ends with( object value )
		---------------
		Asserts using the Ends With() built-in function.

		Factory function for <UtPartialMatcher>.

	Arguments:
		value - should be a string or list

	Examples:
		> ut assert that( Expr( {1, 2, 3} ), ut ends with( {2,3} ) );
		> ut assert that( Expr( {1, 2, 3} ), ut ends with( 3 ) );
		> ut assert that( Expr( "Test" || "string" ), ut ends with( "tstring" ) );
*/
ut matcher factory( "ut ends with" );
ut ends with = Function( {val},
	{obj},
	obj = New Object( UtPartialMatcher( "Ends With", "ends with" ) );
	obj:value = Name Expr( val );
	obj;
);
