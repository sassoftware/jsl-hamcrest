// Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Names Default To Here( 0 );

/* 
	Class: UtEveryMatcher
		---Prototype---
		class UtEveryMatcher inherits UtMatcher
		---------------
*/
Define Class(
	"UtEveryMatcher",
	Base Class( Ut Matcher ),
	inner = Empty();
	_init_ = Method( {inner},
		this:inner = inner
	);
	matches = Method( {test expr},
		actual = test expr;
		If( 
			Is Matrix( Name Expr( actual ) ),
				nr = N Rows( actual );
				nc = N Cols( actual );
				For( i = 1, i <= nr, i++,
					For( j = 1, j <= nc, j++,
						match info = this:inner:matches( actual[i,j] );
						If( !match info:success,
							match info:mismatch = "item [" || Char( i ) || "," || Char( j ) || "] " || match info:mismatch || " within " || Char( actual );
							Return( match info );
						)
					);
				);
				::ut match info success();
		,
			// else
				n = N Items( Name Expr( actual ) );
				For( i = 1, i <= n, i++,
					match info = this:inner:matches( actual[i] );
					If( !match info:success,
						match info:mismatch = "item " || Char( i ) || " " || match info:mismatch || " within " || Char( actual );
						Return( match info );
					)
				);
				::ut match info success();
		);
	);
	describe = Method( {},
		"every item " || this:inner:describe();
	);
);

// Section: Globals

/*
	Function: ut every item
		---Prototype---
		ut every item( UtMatcher matcher )
		---------------
		Uses inner matcher on every item of a list or matrix.
		
		Factory function for <UtEveryMatcher>.

	Arguments:
		matcher - any object

	Example:
		> ut assert that( Expr( [1 1,1 1] || [1, 1] ), ut every item( 1 ) );
		> ut assert that( Expr( {2,2,2,2,2} ), ut every item( 2 ) );
		> ut assert that( Expr( {1,2,3,4,5,6} ), ut every item( ut greater than( 0 ) ) );
*/
ut matcher factory( "ut every item" );
ut every item = Function( {matcher},
	New Object( UtEveryMatcher( ut ensure matcher( Name Expr( matcher ) ) ) )
);
