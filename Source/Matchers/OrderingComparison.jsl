// Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Names Default To Here( 0 );

/*
	Class: UtOrderingComparisonMatcher
		---Prototype---
		class UtAllOfMatcher inherits UtMatcher
		---------------
		Operates only on values (not on matchers). Treats missing values
		as normal JSL.
*/
Define Class(
	"UtOrderingComparisonMatcher",
	Base Class( UtMatcher ),
	value = 0;
	comparison function = .;
	comparison description = "";
	_init_ = Method( {value, comparison function name, comparison description},
		this:value = value;
		this:comparison function = Parse( comparison function name );
		
		this:comparison description = comparison description;
	);
	matches = Method( {test expr},
		actual = Eval( test expr );
		success = this:comparison function( actual, this:value );
		IfMz( 
			Is Missing( success ),
				mismatch = "was " || Char( actual );
				::ut match info failure( mismatch );
		,
			success == 1,
				::ut match info success();
		,
			Is Matrix( success ),
				mismatch = "was non-scalar " || Char( actual );
				::ut match info failure( mismatch );
		,
				mismatch = "was " || Char( actual );
				::ut match info failure( mismatch );
		);
	);
	describe = Method( {},
		comparison description || " " || Char( this:value )
	);
);

// Section: Globals

/*
	Function: ut less than
		---Prototype---
		ut less than( object value )
		---------------
		Factory function for <UtOrderingComparisonMatcher>.

	Arguments:
		value - assumed to NOT be a matcher

	Example:
		> ut assert that( Expr( 5 + 5 ), ut less than( 11 ) );
*/
ut matcher factory( "ut less than",
	Expr(Function( {val},
		New Object( UtOrderingComparisonMatcher( val, "Less", "less than" ) )
	)),
	"ut less than( value )",
	"",
	{{"Simple", ut assert that( Expr( 5 + 5 ), ut less than( 11 ) ); }}
);

/*
	Function: ut less than or equal to
		---Prototype---
		ut less than or equal to( object value )
		---------------
		Factory function for <UtOrderingComparisonMatcher>.

	Arguments:
		value - assumed to NOT be a matcher

	Example:
		> ut assert that( Expr( 5 + 5 ), ut less than or equal to( 10 ) );
*/
ut matcher factory( "ut less than or equal to",
	Expr(Function( {val},
		New Object( UtOrderingComparisonMatcher( val, "Less or Equal", "less than or equal to" ) )
	)),
	"ut less than or equal to( value )",
	"",
	{{"Simple", ut assert that( Expr( 5 + 5 ), ut less than or equal to( 10 ) ); }}
);

/*
	Function: ut greater than
		---Prototype---
		ut greater than( object value )
		---------------
		Factory function for <UtOrderingComparisonMatcher>.

	Arguments:
		value - assumed to NOT be a matcher

	Example:
		> ut assert that( Expr( 5 + 5 ), ut greater than( 9 ) );
*/
ut matcher factory( 
	"ut greater than",
	Expr(Function( {val},
		New Object( UtOrderingComparisonMatcher( val, "Greater", "greater than" ) )
	)),
	"ut greater than( value )",
	"",
	{{"Simple", ut assert that( Expr( 5 + 5 ), ut greater than( 9 ) ); }}
);

/*
	Function: ut greater than or equal to
		---Prototype---
		ut greater than or equal to( object value )
		---------------
		Factory function for <UtOrderingComparisonMatcher>.

	Arguments:
		value - assumed to NOT be a matcher

	Example:
		> ut assert that( Expr( 5 + 5 ), ut greater than or equal to( 10 ) );
*/
ut matcher factory( 
	"ut greater than or equal to",
	Expr(Function( {val},
		New Object( UtOrderingComparisonMatcher( val, "Greater or Equal", "greater than or equal to" ) )
	)),
	"ut greater than or equal to( value )",
	"",
	{{"Simple", ut assert that( Expr( 5 + 5 ), ut greater than or equal to( 10 ) ); }}
);
