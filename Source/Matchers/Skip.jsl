// Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Names Default To Here( 0 );

/*
	Class: UtSkipMatcher
		---Prototype---
		class UtSkipMatcher inherits UtMatcher
		---------------
*/
Define Class(
	"UtSkipMatcher",
	Base Class( UtMatcher ),
	inner = Empty();
	mark as failure = .;
	_init_ = Method( {inner, mark as failure, mismatch string=""},
		this:inner = inner;
		this:mark as failure = mark as failure;
		this:mismatch string = mismatch string;
	);
	matches = Method( {test expr},
		If( this:mark as failure,
			ut match info failure( this:mismatch string ),
			ut match info success()
		);
	);
	describe = Method( {},
		this:inner << Describe();
	);
);

// Section: Globals

/* 
	Function: ut skip
		---Prototype---
		ut skip( UtMatcher matcher = ut anything() )
		---------------
		Used to mark an expression you want to skip. Instead a success
		is reported.
		
		Factory function for <UtSkipMatcher>.

	Arguments:
		matcher - any object

	Example:
		---JSL---
		// If you wanted to skip this assertion but leave it in the
		// script for some reason, you could prevent it running by
		// wrapping the expected value/matcher with ut skip()
		ut assert that( Expr( 1 + 1 ), ut skip( ut equal to( 2 ) ) );
		---------
*/
ut matcher factory( "ut skip" );
ut skip = Function( {matcher=ut anything()},
	New Object( UtSkipMatcher( ut ensure matcher( Name Expr( matcher ) ), 0 ) )
);

/* 
	Function: ut skip failing
		---Prototype---
		ut skip failing( UtMatcher matcher = ut anything() )
		---------------
		Used to mark an expression you want to skip. Instead a failure
		is reported.
		
		Factory function for <UtSkipMatcher>.

	Arguments:
		matcher - any object

	Example:
		---JSL---
		// If you wanted to skip this assertion but leave it in the
		// script for some reason, you could prevent it running by
		// wrapping the expected value/matcher with ut skip()
		ut assert that( Expr( 1 + 1 ), ut skip( ut equal to( 2 ) ) );
		---------
*/
ut matcher factory( "ut skip failing" );
ut skip failing = Function( {matcher=ut anything()},
	New Object( UtSkipMatcher( ut ensure matcher( Name Expr( matcher ) ), 1, "skipped test marked failing" ) )
);