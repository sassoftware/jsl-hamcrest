// Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Names Default To Here( 0 );

/*
	Class: UtHostMatcher
		---Prototype---
		class UtHostMatcher inherits UtMatcher
		---------------
		
		Only runs inner matcher if the current host matches the given host. Otherwise, it returns a success.
*/
Define Class(
	"UtHostMatcher",
	Base Class( UtMatcher ),
	inner = empty();
	host = "";
	_init_ = Method( {inner, host},
		this:inner = inner;
		this:host = host;
	);
	matches = Method( {test expr},
		If( Host Is( this:host ), 
			this:inner:matches( Name Expr( test expr ) ),
			::ut match info success()
		);
	);
	describe = Method( {},
		If( Host Is( this:host ), 
			"on " || this:host || " " || this:inner:describe(),
			"not on " || this:host || " so skipping test"
		);
	);
);

// Section: Globals

/* 
	Function: ut host specific
		---Prototype---
		ut host specific( UtHostMatcher matcher1, UtHostMatcher matcher2 )
		---------------
		Chooses one of the two given matchers based on the current operating system.
		
		Function to choose matcher based on the current operating system.

	Arguments:
		matcher1 - must be either Windows or Mac host matcher. Cannot be of same type as matcher2.
		matcher2 - must be either Windows or Mac host matcher. Cannot be of same type as matcher1.

	Example:
		> ut assert that( Expr( Get Default Directory() ), ut host specific( ut on windows( ut starts with( "/C:/" ) ), ut on mac( ut not( ut starts with( "/C:/" ) ) ) ) );
*/
ut matcher factory( "ut host specific" );
ut host specific = Function( {matcher1, matcher2},
	{matchers},
	If( 
		!ut is a matcher( name expr( matcher1 ) ) | !ut is a matcher( name expr( matcher2 ) ),
			Throw( "ut host specific() requires one Windows and one Mac matcher." ),
		matcher1 << get name != "UtHostMatcher" | matcher2 << get name  != "UtHostMatcher",
			Throw( "ut host specific() requires one Windows and one Mac matcher." ),
		matcher1:host == matcher2:host,
			Throw( "ut host specific() requires one Windows and one Mac matcher." ),
		// else
			matchers = Associative Array( Eval List( {matcher1:host, matcher2:host} ), Eval List( {matcher1, matcher2} ) );
			If( Host Is( "Windows" ),
				matchers["Windows"],
				matchers["Mac"]
			)
	)
);

/* 
	Function: ut on windows
		---Prototype---
		ut on windows( UtMatcher matcher )
		---------------
		Only runs the test if on a Windows host. Returns a success if running on a Mac.
		
		Factory function for <UtHostMatcher>.

	Arguments:
		matcher - any object

	Examples:
		> ut assert that( Expr( Get Default Directory() ), ut on windows( ut starts with( "/C:/" ) ) );
*/
ut matcher factory( "ut on windows" );
ut on windows = Function( {matcher},
	New Object( UtHostMatcher( ut ensure matcher( Name Expr( matcher ) ), "Windows" ) );
);

/* 
	Function: ut on mac
		---Prototype---
		ut on mac( UtMatcher matcher )
		---------------
		Only runs the test if on a Mac host. Returns a success if running on a Windows.
		
		Factory function for <UtHostMatcher>.

	Arguments:
		matcher - any object

	Examples:
		> ut assert that( Expr( Get Default Directory() ), ut on mac( ut not( ut starts with( "/C:/" ) ) ) );
*/
ut matcher factory( "ut on mac" );
ut on mac = Function( {matcher},
	New Object( UtHostMatcher( ut ensure matcher( Name Expr( matcher ) ), "Mac" ) );
);

/* 
	Function: ut host table name
		---Prototype---
		ut host table name( string name )
		---------------
		Returns an equal to matcher that converts a string to a host specific table name string.
		
		Factory function for <UtHostMatcher>.

	Arguments:
		name - string of the Windows version of a table name (without '.jmp')

	Examples:
		---JSL---
		dt = Open( "$SAMPLE_DATA\Big Class.jmp" );
		ut assert that( Expr( dt << Get Name ), ut host table name( "Big Class" ) );
		---------
*/
ut matcher factory( "ut host table name" );
ut host table name = Function( {name},
	If( Is String( name ),
		ut equal to( ut host table name str( name ) );
	,
		Throw( "ut host table name() matcher requires a string as the argument (a Windows table name--without '.jmp')" )
	);
);