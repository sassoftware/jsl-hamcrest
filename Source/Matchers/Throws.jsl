// Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Names Default To Here( 0 );

/*
	Class: UtThrowsMatcher
		---Prototype---
		class UtThrowsMatcher inherits UtMatcher
		---------------
		Matches if the expression under test throws and the text of that
		exception matches the inner matcher.
*/
Define Class(
	"UtThrowsMatcher",
	Base Class( UtMatcher ),
	inner = Empty();
	_init_ = Method( {inner},
		this:inner = inner
	);
	matches = Method( {test expr},
		Try(
			Glue( test expr, ::ut match info failure( "did not throw" ) ),
			this:inner:matches( ut extract thrown string( exception_msg ) )
		);
	);
	describe = Method( {},
		"throws " || this:inner:describe()
	);
);

// Section: Globals

/* 
	Function: ut throws
		---Prototype---
		ut throws( UtMatcher matcher )
		---------------
		
		Captures a thrown message from evaluating the actual expression. 
		Inner matchers can be used to assert on the actual error message.
		The error message comes from the first argument in the exception_msg
		variable, and not from the log.

		Factory function for <UtThrowsMatcher>.

	Arguments:
		matcher - any object

	Example:
		> ut assert that( Expr( Sin( "a" ) ), ut throws( "Cannot convert argument to a number [or matrix]" ) );
		> ut assert that( Expr( Sin( "a" ) ), ut throws( ut anything() ) );
*/
ut matcher factory( "ut throws" );
ut throws = Function( {matcher},
	New Object( UtThrowsMatcher( ut ensure matcher( Name Expr( matcher ) ) ) )
);

/* 
	Function: ut throws invalid arg
		---Prototype---
		ut throws invalid arg()
		---------------
		Equivalent to ut throws( "argument value is invalid" )

		Factory function for <UtThrowsMatcher>.
*/
ut matcher factory( "ut throws invalid arg" );
ut throws invalid arg = Function({},
	New Object( UtThrowsMatcher( ut equal to( "argument value is invalid" ) ) )
);

/* 
	Function: ut throws too many args
		---Prototype---
		ut throws too many args()
		---------------
		Equivalent to ut throws( "too many arguments" )

		Factory function for <UtThrowsMatcher>.
*/
ut matcher factory( "ut throws too many args" );
ut throws too many args = Function({},
	New Object( UtThrowsMatcher( ut equal to( "too many arguments" ) ) )
);

/* 
	Function: ut throws name unresolved
		---Prototype---
		ut throws name unresolved( String var )
		---------------
		Equivalent to ut throws( "Name Unresolved: var" )

		Factory function for <UtThrowsMatcher>.
*/
ut matcher factory( "ut throws name unresolved" );
ut throws name unresolved = Function({var},
	New Object( UtThrowsMatcher( ut equal to( "Name Unresolved: " || var ) ) )
);