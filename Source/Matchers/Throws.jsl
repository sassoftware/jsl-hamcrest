// Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Names Default To Here( 0 );

/*
	Class: UtThrowsMatcher
		---Prototype---
		class UtThrowsMatcher inherits UtMatcher
		---------------
		Matches if the expression under test throws and the text of that
		exception matches the inner matcher.
*/
Define Class(
	"UtThrowsMatcher",
	Base Class( UtMatcher ),
	inner = Empty();
	_init_ = Method( {inner},
		this:inner = inner
	);
	matches = Method( {test expr},
		Try(
			Glue( test expr, ::ut match info failure( "did not throw" ) ),
			this:inner << matches( ut extract thrown string( exception_msg ) )
		);
	);
	describe = Method( {},
		"throws " || (this:inner << describe())
	);
);

// Section: Globals

/* 
	Function: ut throws
		---Prototype---
		ut throws( UtMatcher matcher )
		---------------
		
		Captures a thrown message from evaluating the actual expression. 
		Inner matchers can be used to assert on the actual error message.
		The error message comes from the first argument in the exception_msg
		variable, and not from the log.

		Factory function for <UtThrowsMatcher>.

	Arguments:
		matcher - any object

	Example:
		> ut assert that( Expr( Sin( "a" ) ), ut throws( "Cannot convert argument to a number [or matrix]" ) );
		> ut assert that( Expr( Sin( "a" ) ), ut throws( ut anything() ) );
*/
ut matcher factory( 
	"ut throws",
	Expr(Function( {matcher},
		New Object( UtThrowsMatcher( ut ensure matcher( Name Expr( matcher ) ) ) )
	)),
	"ut throws( matcher )",
	"Captures a thrown message from evaluating the actual expression. Inner matchers can be used to assert on the actual error message. The error message comes from the first argument in the exception_msg variable, and not from the log.",
	{{
		"Simple",
		ut assert that( Expr( Sin( "a" ) ), ut throws( "Cannot convert argument to a number [or matrix]" ) );
		ut assert that( Expr( Sin( "a" ) ), ut throws( ut anything() ) );
	}}
);

/* 
	Function: ut throws invalid arg
		---Prototype---
		ut throws invalid arg()
		---------------
		Equivalent to ut throws( "argument value is invalid" )

		Factory function for <UtThrowsMatcher>.
*/
ut matcher factory( 
	"ut throws invalid arg",
	Expr(Function({},
		New Object( UtThrowsMatcher( ut equal to( 
			ut localize(["en" => "argument value is invalid", 
						 "de" => "Argumentwert ist ungültig", 
						 "es" => "El valor del argumento no es válido.",
						 "fr" => "la valeur de l'argument est incorrecte",
						 "it" => "il valore dell'argomento non è valido",
						 "ja" => "引数の値が無効です。",
						 "ko" => "인수 값이 올바르지 않습니다.",
						 "zh-CN" => "参数值无效"])
		)))
	)),
	"ut throws invalid arg()",
	"\[Equivalent to ut throws( "argument value is invalid" )]\"
);

/* 
	Function: ut throws too many args
		---Prototype---
		ut throws too many args()
		---------------
		Equivalent to ut throws( "too many arguments" )

		Factory function for <UtThrowsMatcher>.
*/
ut matcher factory( 
	"ut throws too many args",
	Expr(Function({},
		New Object( UtThrowsMatcher( ut equal to( 
			ut localize(["en" => "too many arguments", 
						 "de" => "Zu viele Argumente", 
						 "es" => "demasiados argumentos",
						 "fr" => "trop d'arguments",
						 "it" => "troppi argomenti",
						 "ja" => "引数が多すぎます。",
						 "ko" => "인수가 너무 많습니다.",
						 "zh-CN" => "参数过多"])
		)))
	)),
	"ut throws too many args()",
	"\[Equivalent to ut throws( "too many arguments" )]\"
);

/* 
	Function: ut throws name unresolved
		---Prototype---
		ut throws name unresolved( String var )
		---------------
		Equivalent to ut throws( "Name Unresolved: var" )

		Factory function for <UtThrowsMatcher>.
*/
ut matcher factory( 
	"ut throws name unresolved",
	Expr(Function({var},
		New Object( UtThrowsMatcher( ut equal to( 
			ut localize(["en" => "Name Unresolved: ", 
						 "de" => "Name nicht aufgelöst: ", 
						 "es" => "No se puede resolver el nombre: ",
						 "fr" => "Nom non résolu : ",
						 "it" => "Nome non risolto: ",
						 "ja" => "名前が解決できません: ",
						 "ko" => "확인되지 않은 이름: ",
						 "zh-CN" => "未解析名称: "]) || var
		)))
	)),
	"ut throws name unresolved( variable name )",
	"\[Equivalent to ut throws( "Name Unresolved: var" )]\",
	{{"Simple", ut assert that( Expr( someVariableThatShouldNotExist ), ut throws name unresolved("someVariableThatShouldNotExist"))}}
);
