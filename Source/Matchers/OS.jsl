// Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Names Default To Here( 0 );

/*
	Class: UtOSMatcher
		---Prototype---
		class UtOSMatcher inherits UtMatcher
		---------------
		
		Only runs inner matcher if the current OS matches one of the given OSes. Otherwise, it returns a success.
*/
Define Class(
	"UtOSMatcher",
	Base Class( UtMatcher ),
	inner = Empty();
	os list = {};
	_init_ = Method( {os list, inner},
		this:os list = os list;
		this:inner = inner;
	);
	matches = Method( {test expr},
		If( this:supports current os(),
			this:inner << Matches( Name Expr( test expr ) ),
			ut match info success()
		);
	);
	describe = Method( {},
		If( this:supports current os(),
				"on " || Concat Items( this:os list, " or " ) || " " || (this:inner << Describe()),
			// else
				"not on " || Concat Items( this:os list, " or " ) || " so skipping test"
		);
	);
	supports current os = Method({},
		If( Contains( this:os list, JMP Host Information()[1] ), 1, 0 );
	);
);

// Section: Globals

/* 
	Function: ut os specific
		---Prototype---
		ut os specific( List[UtOSMatcher] matchers, default_matcher = ut skip failing() )
		---------------
		
		Function to choose matcher based on the current operating system.

	Arguments:
		matchers - list of <ut on os> matchers.
		default_matcher - matcher to use when not on any of the listed Operating systems. <ut skip failing> by default.

	Example:
		---JSL---
		ut assert that( Expr( 0 + 0 ), ut os specific( {ut on os( {"Windows 10", "Windows 7"}, 0 )} ) );
		---------
		
*/
ut matcher factory( "ut os specific" );
ut os specific = Function( {matchers, default matcher=ut skip failing()},
	{i},
	matchers = ut ensure matcher list( matchers );
	For( i = 1, i <= N Items( matchers ), i++,
		If( matchers[i] << Get Name != "UtOSMatcher",
				Throw( "ut os specific() requires a list of ut on os() matchers." ),
			matchers[i] << Supports Current OS(),
				Return( matchers[i] );
		)
	);
	ut ensure matcher( default matcher );
);

/* 
	Function: ut on os
		---Prototype---
		ut on os( String os, UtMatcher matcher )
		ut on os( List[String] os, UtMatcher matcher )
		---------------
		Only runs the test if on running on one of the specified operating systems. Returns a success if not running on a listed OS.
		
		OS is determined by `JMP Host Information()[1]` value.
		
		Factory function for <UtOSMatcher>.

	Arguments:
		os - string or list of valid OSes
		matcher - any object

	Examples:
		---JSL---
		// only run on Windows 10 or Windows 7
		ut assert that( Expr( 0 + 0 ), ut on os( {"Windows 10", "Windows 7"}, 0 ) );
		---------
*/
ut matcher factory( "ut on os" );
ut on os = Function( {os, matcher},
	{oses},
	If( Is String( Name Expr( os ) ),
			oses = Eval List( {os} ),
		Is List( Name Expr( os ) ),
			oses = os,
		//else
			Throw( "ut on os() requires an OS string or list of OS Strings as the first argument." )
	);
	New Object( UtOSMatcher( oses, ut ensure matcher( Name Expr( matcher ) ) ) );
);

