// Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Names Default To Here( 0 );

/*
	Class: UtMessageMatcher
		---Prototype---
		class UtMessageMatcher inherits UtMatcher
		---------------
		
		Matches using an inner matcher after sending a desired message
		to the resulting object.
*/
Define Class("UtMessageMatcher", 
	Base Class( "UtTypedMatcher" ),
	inner = Empty();
	description = "";
	message = "";
	allowable types = {Scriptable};
	_init_ = Method( {inner, description, message},
		this:inner = inner;
		this:description = description;
		this:message = message;
	);
	typed matches = Method( {actual},
		match info = Eval( Eval Expr( this:inner << Matches( Send( actual, Expr( this:message ) ) ) ) );
		If( !match info:success,
			match info:mismatch = Eval Insert( "^ut detailed type( actual )^ << ^this:message^ ^match info:mismatch^" );
		);
		match info;
	);
	describe = Method( {},
		this:description || " " || inner:describe();
	);
);

// Section: Globals

/*	Function: ut message
		---Prototype---
		ut message( UtMatcher matcher, description, message );
		---------------
		General message matcher factory. Mostly used in other factory functions,
		but can be used in tests if needed.
		
		Factory function for <UtMessageMatcher>.

	Arguments:
		matcher - any object
*/
ut matcher factory( "ut message" );
ut message = Function( {matcher, description, message},
	{obj},
	obj = New Object( UtMessageMatcher( ut ensure matcher( Name Expr( matcher ) ), description, message ) );
	obj:self = obj;
);

/* 
	Function: ut title
		---Prototype---
		ut title( UtMatcher matcher )
		---------------
		Compare inner matcher to the result of sending the Get Title message to the result.
		
		Factory function for <UtMessageMatcher>.

	Arguments:
		matcher - any object

	Examples:
		---JSL---
		pb = Panel Box( "hello, world" );
		ut assert that( Expr( pb ), ut title( "hello, world" ) );
		---------
*/
ut matcher factory( "ut title" );
ut title = Function( {matcher},
	ut message( Name Expr( matcher ), "title", "Get Title" );
);

/* 
	Function: ut text
		---Prototype---
		ut text( UtMatcher matcher )
		---------------
		Compare inner matcher to the result of sending the Get Text message to the result.
		
		Factory function for <UtMessageMatcher>.

	Arguments:
		matcher - any object

	Examples:
		---JSL---
		tb = Text Box( "hello, world" );
		ut assert that( Expr( tb ), ut text( "hello, world" ) );
		---------
*/
ut matcher factory( "ut text" );
ut text = Function( {matcher},
	ut message( Name Expr( matcher ), "text", "Get Text" );
);

/* 	Function: ut enabled
		---Prototype---
		ut enabled( UtMatcher matcher )
		---------------
		Compare inner matcher to the result of sending the Get Enabled message to the result.
		
		NOTE: This message checks the enabled state set by the Enabled message and not the Enable message.
		
		Factory function for <UtMessageMatcher>.

	Arguments:
		matcher - any object

	Examples:
		---JSL---
		tb = Text Box( "hello, world" );
		ut assert that( Expr( tb ), ut enabled( 1 ) );
		tb << Enabled( 0 );
		ut assert that( Expr( tb ), ut enabled( 0 ) );
		---------
*/
ut matcher factory( "ut enabled" );
ut enabled = Function( {matcher},
	ut message( Name Expr( matcher ), "enabled", "Get Enabled" );
);

/* 
	Function: ut class name
		---Prototype---
		ut class name( UtMatcher matcher )
		---------------
		Compare inner matcher to the result of sending the Class Name message to the result.
		
		Factory function for <UtMessageMatcher>.

	Arguments:
		matcher - any object

	Examples:
		---JSL---
		pb = Panel Box( "hello, world" );
		ut assert that( Expr( pb ), ut class name( "PanelBox" ) );
		---------
*/
ut matcher factory( "ut class name" );
ut class name = Function( {matcher},
	ut message( Name Expr( matcher ), "class name", "Class Name" );
);

/* 
	Function: ut name
		---Prototype---
		ut name( UtMatcher matcher )
		---------------
		Compare inner matcher to the result of sending the Get Name message to the result.
		
		Factory function for <UtMessageMatcher>.
		
		See <ut host table name> for info on converting data table names to host versions.

	Arguments:
		matcher - any object

	Examples:
		---JSL---
		dt = Open( "$SAMPLE_DATA\Big Class.jmp" );
		ut assert that( Expr( dt ), ut name( ut host table name( "Big Class" ) ) );
		
		ns = New Namespace( "Foo" );
		ut assert that( Expr( ns ), ut name( "Foo" ) );
		---------
*/
ut matcher factory( "ut name" );
ut name = Function( {matcher},
	ut message( Name Expr( matcher ), "name", "Get Name" );
);
