// Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Names Default To Here( 0 );

/*
	Class: UtTypedAsMatcher
		---Prototype---
		class UtTypedAsMatcher inherits UtMatcher
		---------------
		Matches when the Type() string satisifies the given matcher.
*/
Define Class(
	"UtTypedAsMatcher",
	Base Class( Ut Matcher ),
	inner = Empty();
	_init_ = Method( {inner},
		this:inner = inner
	);
	matches = Method( {test expr},
		actual = test expr;
		match info = this:inner:matches( Type( Name expr( actual ) ) );
		If( !match info:success,
			match info:mismatch = "Type( " || ut get show string( Name Expr( actual ) ) || " ) " || match info:mismatch;
		);
		match info;
	);
	describe = Method( {},
		"typed as " ||  this:inner:describe()
	);
);

// Section: Globals

/* 
	Function: ut typed as
		---Prototype---
		ut typed as( UtMatcher matcher )
		---------------
		Gets the type of the actual value for an inner matcher.
		
		Can be useful if testing a large expression and you want to assert
		that there is something of a specific type, but you don't care
		what the actual value is (but a little more specific than ut anything()).
		
		Factory function for <UtTypedAsMatcher>.

	Arguments:
		matcher - any object

	Example:
		> ut assert that( Expr( 5 + 5 ), ut typed as( "Number" ) );
*/
ut matcher factory( "ut typed as" );
ut typed as = Function( {matcher},
	New Object( UtTypedAsMatcher( ut ensure matcher( Name Expr( matcher ) ) ) )
);