// Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Names Default To Here( 0 );

/*
	Class: UtAnyOfMatcher
		---Prototype---
		class UtAnyOfMatcher inherits UtMatcher
		---------------
		
		Matches if and only if all of the given matchers are satisfied.
*/
Define Class(
	"UtAnyOfMatcher",
	Base Class( UtMatcher ),
	matchers = {};
	_init_ = Method( {matchers},
		this:matchers = matchers;
	);
	matches = Method( {test expr},
		mismatch = {};
		for( i = 1, i <= N Items(this:matchers), i++,
			matchInfo = this:matchers[i] << matches( Name Expr( test expr ) );
			
			If( matchInfo:success,
				Return( ::ut match info success(); );
			,
				Insert Into( mismatch, matchInfo:mismatch );
			);
		);
		::ut match info failure( "(" || Concat Items( mismatch, " and " ) || ")" );
	);
	describe = Method( {},
		"(" || Concat Items( this:matchers << describe(), " or " ) || ")"
	);
);

// Section: Globals

/* 
	Function: ut any of
		---Prototype---
		ut any of( List<UtMatcher> matchers )
		---------------
		Matches the test expression with any matcher given in the list.
		
		Factory function for <UtAnyOfMatcher>.

	Arguments:
		matchers - a list of any objects

	Example:
		> ut assert that( Expr( 5 + 5 ), ut any of( {19, 10} ) );
		
	Note:
		This matcher will give the test expression (unevaluated) to each matcher in the given list.
*/
ut matcher factory( "ut any of" );
ut any of = Function( {matchers},
	New Object( UtAnyOfMatcher( ut ensure matcher list( matchers ) ) );
);
