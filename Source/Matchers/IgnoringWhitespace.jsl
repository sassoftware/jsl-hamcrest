// Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Names Default To Here( 0 );

/*
	Class: UtIgnoringWhitespaceMatcher
		---Prototype---
		class UtIgnoringWhitespaceMatcher inherits UtMatcher
		---------------
		Operates only on string values (not on matchers). 
*/
Define Class(
	"UtIgnoringWhitespaceMatcher",
	Base Class( UtMatcher ),
	inner = Empty();
	_init_ = Method( {inner},
		this:inner = inner;
	);
	matches = Method( {test expr},
		inner:matches( Collapse Whitespace( test expr ) );
	);
	describe = Method( {},
		"ignoring whitespace " || this:inner:describe();
	);
);

// Section: Globals

/*
	Function: ut equal to ignoring whitespace
		---Prototype---
		ut equal to ignoring whitespace( string value )
		---------------
		Collapses the whitespace of the actual expression.
		
		Expected value should be a string, and whitespace
		will be automatically be collapsed on the expected
		value, in addition to the actual.
		
		To use an inner matcher, see <ut ignoring whitespace>.
		
		Factory function for <UtIgnoringWhitespaceMatcher>.

	Arguments:
		value - should be a string

	Examples:
		> ut assert that( Expr( "  test " || " test   " ), ut equal to ignoring whitespace( "test    test" ) );
		> ut assert that( Expr( Show( 5 + 5 ) ), ut log is( ut equal to ignoring whitespace( "5 + 5 = 10;" ) ) );
*/
ut matcher factory( "ut equal to ignoring whitespace" );
ut equal to ignoring whitespace = Function( {val},
	If( Is String( name expr( val ) ),
		New Object( UtIgnoringWhitespaceMatcher( ut equal to( Collapse Whitespace( val ) ) ) ),
		Throw( "ut equal to ignoring whitespace() requires a string as the argument" )
	);
);

/*
	Function: ut ignoring whitespace
		---Prototype---
		ut ignoring whitespace( UtMatcher matcher )
		---------------
		Collapses the whitespace of the actual expression only.
		
		Expected string should have whitespace already collapsed.
		
		Factory function for <UtIgnoringWhitespaceMatcher>.

	Arguments:
		matcher - any object

	Examples:
		> ut assert that( Expr( "  test " || " test   " ), ut ignoring whitespace( "test test" ) );
		> ut assert that( Expr( "  test " || " test   " ), ut ignoring whitespace( ut starts with( "test t" ) ) );
		> ut assert that( Expr( Show( 5 + 5 ) ), ut log is( ut ignoring whitespace( "5 + 5 = 10;" ) ) );
*/
ut matcher factory( "ut ignoring whitespace" );
ut ignoring whitespace = Function( {matcher},
	New Object( UtIgnoringWhitespaceMatcher( ut ensure matcher( matcher ) ) );
);