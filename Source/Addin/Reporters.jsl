// Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Names Default To Here( 0 );

// Section: Globals

/* 
	Class: UtSummaryReporter
		---Prototype---
		class UtSummaryReporter inherits UtReporter
		---------------
		
		Count successes and failures. After each, report to a
		a simple Text Box.
*/
Define Class("UtSummaryReporter",
	Base Class(UtReporter),
	n success = 0;
	n failure = 0;
	box = Empty();
	_init_ = Method( {box},
		this:box = box
	);
	update view = Method({},
		this:box << Set Text( "✓ " || Char( this:n success ) || " ✗ " || Char( this:n failure ) )
	);
	add expression failure = Method( {label, payload=Empty()},
		this:n failure++;
		this:update view()
	);
	add failure = Method( {label, test expr, description, mismatch, lre, payload=Empty()},
		this:n failure++;
		this:update view()
	);
	add unexpected throw = Method( {label, test expr, description, exception, payload=Empty()},
		this:n failure++;
		this:update view()
	);
	add success = Method( {label, test expr, description, payload=Empty()},
		this:n success++;
		this:update view()
	);
	on run start = Method( {},
		this:n success = 0;
		this:n failure = 0;
		this:box << Set Text("");
	);
	on run end = Method( {},
		.
	);
);

/* 
	Class: UtCompositeReporter
		---Prototype---
		class UtCompositeReporter inherits UtReporter
		---------------
		
		Forward all messages (unchanged) to an inner list of reporters.
*/
Define Class("UtCompositeReporter",
	Base Class( UtReporter ),
	reporters = {};
	_init_ = Method( {reporters},
		this:reporters = reporters
	);
	add expression failure = Method( {label, payload=Empty()},
		this:reporters << add expression failure( label, payload )
	);
	add failure = Method( {label, test expr, description, mismatch, lre, payload=Empty()},
		this:reporters << add failure( label, Name Expr( test expr ), description, mismatch, lre, payload )
	);
	add unexpected throw = Method( {label, test expr, description, exception, payload=Empty()},
		this:reporters << add unexpected throw( label, Name Expr( test expr ), description, exception, payload )
	);
	add success = Method( {label, test expr, description, payload=Empty()},
		this:reporters << add success( label, Name Expr( test expr ), description, payload )
	);
	on run start = Method( {},
		this:reporters << on run start()
	);
	on run end = Method( {},
		this:reporters << on run end()
	);
);

/* 
	Class: UtWindowDispatchingReporter
		---Prototype---
		class UtWindowDispatchingReporter inherits UtCompositeReporter
		---------------
		
		Forward all messages (unchanged) to a window-based reporter or to a
		fall-back reporter. When the run starts, the current window is 
		captured. If there is a reporter registered for that window, that
		reporter (and that reporter alone) is sent the messages for that run.
		If there is no reporter registered, the fall-back reporter is sent
		the messages. This allows per-window reporters that are isolated
		from each other.
*/
Define Class("UtWindowDispatchingReporter",
	Base Class(UtCompositeReporter),
	by window = [=>];
	_init_ = Method({default reporter},
		this:by window << Set Default Value(default reporter);
		this:reporters = Eval List({by window << Get Default Value});
	);
	register reporter = Method({win, reporter}, this:by window[win] = reporter );
	unregister reporter = Method({win},
		this:by window << Remove Item( win );
	);
	get reporter = Method({win}, this:by window[win] );
	on run start = Method( {},
		this:reporters = Eval List({by window[Current Window()]});
		this:reporters << on run start()
	);
	on run end = Method( {},
		this:reporters << on run end();
		this:reporters = Eval List({by window << Get Default Value});
	);
);

/* 
	Class: UtRunOnlyReporter
		---Prototype---
		class UtRunOnlyReporter inherits UtReporter
		---------------
		
		For reporters that only deal with the on run start/end interface and
		would like to ignore all other messages.
*/
Define Class("UtRunOnlyReporter",
	Base Class(UtReporter),
	add expression failure = Method( {label, payload=Empty()}, .);
	add failure = Method( {label, test expr, description, mismatch, lre, payload=Empty()}, .);
	add unexpected throw = Method( {label, test expr, description, exception, payload=Empty()}, .);
	add success = Method( {label, test expr, description, payload=Empty()}, .);
);

// Function: ut make new node
ut make new node = Function({label}, {node},
	node = Tree Node(label);
	node << Set Data({});
	node
);

// Function: ut get or create
ut get or create = Function({assoc array expr, key, factory},
	If(assoc array expr << Contains Item(key),
		assoc array expr[key],
		assoc array expr[key] = factory(key)
	)
);

// Function: ut format node entry
ut format node entry = Function({data}, {short desc, label details, str},
	short desc = Expr(If(Length(data[4]) > 30, Left(data[4], 30) || " ...", data[4]));
	
	If( ut test runner preference( "Use Markup" ),
		label details = Expr(If(Length(data[2]), Eval Insert("<i>(^Xml Encode(Char(data[2]))^)</i>"), ""));
		str = Match(data[1],
			0, "<b>SUCCESS</b>  ^Xml Encode(Char(Name Expr(data[3])))^ ^Xml Encode(Char(short desc))^ ^label details^\!N    <i>Expected:</i> ^Xml Encode(Char(data[4]))^",
			1, "<b>EXPRESSION FAILURE</b>  ^label details^",
			2, "<b>FAILURE</b>  ^Xml Encode(Char(Name Expr(data[3])))^ ^Xml Encode(Char(short desc))^ ^label details^\!N    <i>Actual:</i> ^Xml Encode(Char(data[5]))^\!N    <i>Expected:</i> ^Xml Encode(Char(data[4]))^",
			3, "<b>FAILURE</b>  ^Xml Encode(Char(Name Expr(data[3])))^ ^Xml Encode(Char(short desc))^ ^label details^\!N    <i>Actual:</i> threw &quot;^Xml Encode(Char(data[5]))^&quot;\!N    <i>Expected:</i> ^Xml Encode(Char(data[4]))^"
		);
		If(2 == data[1] & !Is Missing(data[6]),
			str ||= "\!N    <i>LRE:</i> ^Xml Encode(Char(data[6]))^"
		);
	,
		label details = Expr(If(Length(data[2]), Eval Insert("(^data[2]^)"), ""));
		str = Match(data[1],
			0, "SUCCESS  ^Name Expr(data[3])^ ^short desc^ ^label details^\!N    Expected: ^data[4]^",
			1, "EXPRESSION FAILURE  ^label details^",
			2, "FAILURE  ^Name Expr(data[3])^ ^short desc^ ^label details^\!N    Actual: ^data[5]^\!N    Expected: ^data[4]^",
			3, "FAILURE  ^Name Expr(data[3])^ ^short desc^ ^label details^\!N    Actual: threw \!"^data[5]^\!"\!N    Expected: ^data[4]^"
		);
		If(2 == data[1] & !Is Missing(data[6]),
			str ||= "\!N    LRE: ^data[6]^"
		);
	);
	
	Eval Insert(str)
);

// Function: ut format node data
ut format node data = Function({node}, {data, i, str},
	data = node << Get Data();
	str = "";
	For(i = 1, i <= N Items(data), i++,
		If( ut test runner preference( "Use Markup" ),
			str ||= ut format node entry(data[i]) || "\!N\!N";
		,
			str ||= "\!N" || ut format node entry(data[i]) || "\!N";
		)
	);
	str
);
	
/* 
	Class: UtDetailsTreeReporter
		---Prototype---
		class UtDetailsTreeReporter inherits UtReporter
		---------------
*/
Define Class("UtDetailsTreeReporter",
	Base Class(UtReporter),
	box = Empty();
	cases = [=>];
	_init_ = Method({box},
		this:box = box;
		this:on run start();
	);
	update node = Method({node, event type, label, payload},
		Insert Into(payload, label, 1);
		Insert Into(payload, event type, 1);
		node << Set Data(Insert(node << Get Data, Eval List({payload})));
		update node icon(node);	
	);
	update node icon = Method({node},
		data = node << Get Data();
		event types = [=>];
		For(i = 1, i <= N Items(data), i++,	event types[data[i][1]] = .);
		event types = event types << Get Keys();
		final type = Maximum(event types);
		node << Set Icon(Match(final type,
		                       0, ut icon("success-32px"),
		                       1, ut icon("exprfailure-32px"),
		                       2, ut icon("failure-32px"),
		                       3, ut icon("throw-32px")));
		If(final type == 0,	this:box << Collapse(node),	this:box << Expand(node));
	);
	process test case event = Method({event type, full label, case label, test label, assertion label, assertion id, payload},
		local cases = this:cases;
		tests = ut get or create(Expr(local cases), case label, Eval(Eval Expr(Function({case label}, {case, tests},
			case = ut make new node(case label);
			Expr(this:box) << Add Root(case);
			tests = [=>];
			tests << Set Default Value(case);
			tests
		))));
		case = tests << Get Default Value();
		test = ut get or create(Expr(tests), test label, Function({test label}, {test},
			test = ut make new node(test label);
			case << Append(test);
			test
		));
		local cases[case label] = tests;
		this:cases = local cases;
		this:update node(test, event type, full label, payload);
		this:update node(case, event type, full label, payload);
	);
	process free event = Method({event type, label, payload},
		case = this:cases << Get Default Value();
		test = ut make new node(If(Length(label), label, "[Unlabeled]"));
		case << Append(test);
		this:update node(test, event type, label, payload);
		this:update node(case, event type, label, payload);
	);
	process event = Method({event type, label, payload},
		details = If(Length(label), Words(label, ::ut concat test label sep), {""});
		If(
			Length(details) == 1, // Label (optional)
				this:process free event(event type, label, payload),
			Length(details) == 3, // Test Case, Test, Assertion Id
				this:process test case event(event type, label, details[1], details[2], "", details[3], payload),
			Length(details) == 4, // Test Case, Test, Label, Assertion Id
				this:process test case event(event type, label, details[1], details[2], details[3], details[4], payload),
			Throw(Eval Insert("Ill-formed label: ^label^"))
		)
	);
	add expression failure = Method( {label, payload=Empty()},
		this:process event(1, label, {});
	);
	add failure = Method( {label, test expr, description, mismatch, lre, payload=Empty()},
		this:process event(2, label, Eval List({Name Expr(test expr), description, mismatch, lre}));
	);
	add unexpected throw = Method( {label, test expr, description, exception, payload=Empty()},
		this:process event(3, label, Eval List({Name Expr(test expr), description, exception}));
	);
	add success = Method( {label, test expr, description, payload=Empty()},
		this:process event(0, label, Eval List({Name Expr(test expr), description}));
	);
	on run start = Method( {},
		default = ut make new node("Default");
		this:box << Set Roots(Eval List({default}));
		this:cases = [=>];
		this:cases << Set Default Value(default);
	);
	on run end = Method( {},
		default = this:cases << Get Default Value();
		If(default << Get Child Count() == 0,
			this:box << Remove Root(default)
		);
		If(N Items(this:box << Get Roots()),
			this:box << Set Selected((this:box << Get Roots())[1])
		);
	);
);

/* 
	Class: UtBusyReporter
		---Prototype---
		class UtBusyReporter inherits UtReporter
		---------------
		
		Spin a Busy Light while the run is in progress.
*/
Define Class("UtBusyReporter",
	Base Class( UtRunOnlyReporter ),
	busy = Empty();
	_init_ = Method( {busy},
		this:busy = busy
	);
	on run start = Method( {},
		this:busy << Automatic( 1 )
	);
	on run end = Method( {},
		this:busy << Automatic( 0 );
		this:busy << Disable( 0 );
	);
);

/* 
	Class: UtTimingReporter
		---Prototype---
		class UtTimingReporter inherits UtReporter
		---------------
		
		Time the run and report the result to simple Text Box.
*/
Define Class( "UtTimingReporter",
	Base Class( UtRunOnlyReporter ),
	start = .;
	box = Empty();
	_init_ = Method( {box},
		this:box = box
	);
	on run start = Method( {},
		this:start = HP Time();
		this:box << Set Text( "" );
		
	);
	on run end = Method( {},
		delta = HP Time() - this:start;
		this:box << Set Text( Eval Insert("^Char( delta )^ µs (^Format(delta*1e-6, \!"hr:m:s\!")^)") );
	);
);