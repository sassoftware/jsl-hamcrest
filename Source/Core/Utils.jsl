// Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Names Default To Here( 0 );

/*
	Variable: ut matcher factories
		List of head expressions for all matcher functions.

		Used by <UtExpressionCompositeMatcher>
*/
ut matcher factories = {};

/* 
	Function: ut matcher factory
		---Prototype---
		ut matcher factory( string name )
		---------------
		Function used to insert their names into the ut matcher 
		factories list.
		
	Arguments:
		name - string name for the function
*/
ut matcher factory = Function({name},
	If( !Contains( ut matcher factories, As Name( name ) ),
		Insert Into( ut matcher factories, As Name( name ) );
	);
);

/*	Function: ut with reporter
		Temprorarily sets <ut global reporter>
		to the given reporter and resets it back
		to its original state, even if the 
		expression threw an error.
*/
ut with reporter = Function({reporter, expression},
    {global reporter},
    global reporter = ut global reporter;
    ut global reporter = reporter;
    Try(
        First(
            expression,
            ut global reporter = global reporter
        ),
        ut global reporter = global reporter;
        Throw( Char( exception_msg ) );
    );
);

/*
	Function: ut get exception message
	
	Arguments:
		e - List or string value (from exception_msg global variable set within a Try())

	Returns:
		String representing the different parts of the exception_msg 
		variable.
*/
ut get exception message = Function({e},
	{Default Local},
	If( IsString(e), Return( e ));
	If( !IsList(e), Return( "Unknown" ) );
	
	errorList = {};
	
	for(i=1,i<=nitems(e),i++,
		err = e[i];
		
		temp = Head Name( err );
		If( !Ends With( temp, "." ), temp ||= "." );
		Insert Into( errorList, temp );
		offset=0;

		for(j=1,j<=narg( err ),j++,
			a = Arg( err, j );
			match( j+offset,
				1,
					Insert Into( errorList, Char( a ) || " time" || If MZ(a >1,"(s)","" ) ||"." ),
				
				2,
					if( type( a ) == "List",
						Insert Into( errorList,"Data Table Indices: " || char(a) );
					,
						offset++;
						j--;
					),
				
				3,
					Insert Into( errorList, 
						Match( a,
							0, "Note:",
							1, "Warning:",
							2, "Error:",
							3, "Fatal:"
						),
						1
					),
				
				4,
					If( Type( Arg(err,4-offset) ) == "String",
						.; // Do nothing
					,
						offset++;j--;
					),
				
				5,
					If( Char( Head Name( arg(err,5-offset) ) ) == "Bad Argument",
						Insert Into( errorList, "Bad Argument( " || char( arg(a,1)) || " )" ),
						offset++;j--;
					),
				6,
					Insert Into( errorList, char(nameExpr(a)) );
			)
		);
	);
	
	errStr = Concat Items( errorList, " " );
	
	Return(errStr);
);

/* 
	Function: ut get exception expression
		Takes the exception_msg variable as an argument and extracts
		the expression being executed from the list. If the expression 
		cannot be found, it returns Expr( Unknown Expression ).
*/
ut get exception expression = Function( {e},
	{resultExpr, err, offset, i, j, a},
	
	If( 
		Is String( e ),
			Return( Eval Expr( Throw( Expr( e ) ) ) ),
		!Is List( e ),
			Return( Expr( Unknown Expression ) )
	);
	
	resultExpr = Expr( Glue() );
	
	For( i = 1, i <= N Items( e ), i++,
		err = e[i];
		
		offset = 0;

		For( j = 1, j <= N Arg( err ), j++,
			a = Arg( err, j );
			Match( j + offset, 
				// 1 is required
				2,
					If( Type( a ) != "List",
						offset++;
						j--;
					), 
				// 3 is required
				4,
					If( Type( Arg( err, 4 - offset ) ) != "String",
						offset++;
						j--;
					),
				5,
					If( Head( Arg( err, 5 - offset ) ) != Expr( Bad Argument() ),
						offset++;
						j--;
					),
				6, 
					Insert Into( resultExpr, Name Expr( a ) ) 
			);
		);
	);
	
	If( N Arg( resultExpr ) == 0,
		Return( Expr( Unknown Expression ) ),
		Name Expr( resultExpr )
	);
	
);

/*
	Function: ut extract thrown string
		Get just the first string portion of the exception_msg. If it
		is just a string, return that.
*/
ut extract thrown string = Function({msg},
	If( Is String(msg),
			msg,
		// otherwise
			Char( msg[1] )
	)
);

/*
	Function: ut is comparable
		Returns true when two objects are of the same type.
		This function considers Integers and Numbers to be of the same type.
*/
ut is comparable = Function({objA, objB},
	If( Is Number( Name Expr( objA ) ) & Is Number( Name Expr( objB ) ),
			1,
		// expressions and names are in fact comparable.
		// Using Is Expr() like we did for IsNumber() could give false positives.
		Contains( {"Expression","Name"}, Type( Name Expr( objA ) ) ) & Contains( {"Expression","Name"}, Type( Name Expr( objB ) ) ),
			1,
		Type( Name Expr( objA ) ) == Type( Name Expr( objB ) )
	)
);

/*
	Function: ut is numeric missing
		Returns true only if the argument has the value . (dot)
		
		This is subtly different than just Is Missing().
*/
ut is numeric missing = Function( {obj},
	Is Number( Name Expr( obj ) ) & Is Missing( Name Expr( obj ) )
);

/*
	Function: ut equal with missing
		Compares two values and returns true if they are equal. 
		
		Considers both values being missing as equal.
		
		Uses <ut is numeric missing> to determine missing values

	Arguments:
		a - value to compare
		b - value to compare
		
	History:
		31jul2018/juchil - updated to use <ut is numeric missing> to allow for comparing any value.
*/
ut equal with missing = Function( {a, b},
	If(
		ut is numeric missing( Name Expr( a ) ) & ut is numeric missing( Name Expr( b ) ), 
			1,
		ut is numeric missing( Name Expr( a ) ) != ut is numeric missing( Name Expr( b ) ), 
			0,
		Is Empty( Name Expr( a ) ) & Is Empty( Name Expr( b ) ),
			1,
		Is Empty( Name Expr( a ) ) != Is Empty( Name Expr( b ) ),
			0,
		// else
			a == b
	)
);

/*
	Function: ut get show string
	   Converts non-string values to character. 
	   If the value is a string, double quotes are concatenated 
	   to the beginning and end. This is used for showing values
	   in expected and actual results.
*/
ut get show string = Function( {obj},
	If( Is String( Name Expr( obj ) ),
		"\!"" || obj || "\!"",
		Char( Name Expr( obj ) )
	);
);

/*
	Function: ut object supports message
		Checks if the given object allows for receiving a given message.
*/
ut object supports message = Function({obj, msg},
	{propStr, rc},
	If( 
		Is Scriptable( Name Expr( obj ) ),
			// Get a string containing all available messages for the object
			propStr = Log Capture( Show Properties( Name Expr( obj ) ) );
			
			// remove all spaces from the message name
			msg = Substitute( msg, " ", "" );
			
			// put optional spaces between each letter
			msg = concat items( words( msg, "" ), "\s*" );
			
			// Find the message in the Show Properties() output
			// example: Get Title [Action]
			rc = Regex(
				propStr,
				Eval Insert( "\s+(^msg^)\s\!\[" ),
				"\1",
				IGNORECASE
			);
			If( ut is numeric missing( rc ), 0, 1 );
	,
		// else not scriptable
			0
	);
);

/*
	Function: ut detailed type
		Get's the type with extra info where appropriate.
*/
ut detailed type = Function({obj},
	{type},
	
	type = Type( Name Expr( obj ) );
	
	Match( type,
		"DisplayBox",
			Eval Insert( "DisplayBox[^obj << Class Name^]" ),
		"DisplaySeg",
			Eval Insert( "DisplaySeg[^obj << Class Name^]" ),
		"Namespace",
			Eval Insert( "Namespace[^obj << Get Name^]" ),
		"Class",
			Eval Insert( "Class[^obj << Get Name^]" ),
		"List",
			Eval Insert( "List[^N Items( obj )^]" ),
		"Matrix",
			Eval Insert( "Matrix[^N Col( obj )^x^N Row( obj )^]" ),
		"Picture",
			Eval Insert( "Picture[^Concat Items( obj << Get Size, \!"x\!" )^]" ),
		"Column",
			Eval Insert( "Column[^obj << Get Name^]" ),
		"Table",
			Eval Insert( "Table[^obj << Get Name^]" ),
		"Scriptable",
			"Scriptable[" || Substitute( Char( Name Expr( obj ) ), "[]", "", "()", "" ) || "]",
		// default
			type;
	);
);

/*	
	Function: ut host table name str
		Give it the windows table and get back a host specific data table name. (i.e. it appends ".jmp" on Mac to a given string)
		
		For a matcher that uses this function, see <ut host table name>
*/
ut host table name str = Function({tbl_name},
	If( Host Is( "Mac" ),
		tbl_name || ".jmp",
		tbl_name
	)
);

/*	Function: ut as expr
		Converts any value into an expression by wrapping it in Glue().
		
		Great for when you want to use a literal value as the first arg in <ut assert that>
*/
ut as expr = Function( {any},
	Eval Expr( Glue( Expr( any ) ) )
);

/*	Function: ut expr literal
		Wraps the given literal value in an expression.
*/
ut expr literal = Function( {an expr},
	Insert( Expr( Expr() ), Name Expr( an expr ) )
);

// Variable: ut concat test label sep
ut concat test label sep = "⮚";

/*	Function: ut concat test label
   		Concatenates values together for <ut test>
*/
ut concat test label = Function({test case name, test name, label="", n asserts=.},
	{labelList},
	labelList = {};
	If( test case name != "", Insert Into( labelList, test case name ) );
	If( test name != "",Insert Into( labelList, test name ) );
	If( label != "",  Insert Into( labelList, label ) );
	If( !Is Missing( n asserts ), Insert Into( labelList, Char( n asserts ) ) );
	
	Concat Items( local:labelList, " " || ut concat test label sep || " " );
);

/*	Function: ut merge expressions
		Merges all expressions in a given list
		with a single glue expression.
*/
ut merge expressions = Function({exprs},
	{baseExpr, anExpr, iExpr, iArg},
	baseExpr = Expr( Glue() );
	For( iExpr = 1, iExpr <= Nitems( exprs ), iExpr++,
		anExpr = exprs[iExpr];
		If( Is Expr( Name Expr( anExpr ) ),
			If( Head( anExpr ) == Expr( Glue() ),
				For( iArg = 1, iArg <= narg( anExpr ), iArg++,
					Insert Into( baseExpr, Arg( anExpr, iArg ) )
				);
			,
				Insert Into( baseExpr, Name Expr( anExpr ) );
			);
		);
	);
	Name Expr( baseExpr );
);

/*	Function: ut move to anonymous namespace
		Takes a namespace and moves all args with values 
		to a new anonymous namespace and 
		removes them from the given namespace.
*/
ut move to anonymous namespace = Function({ns},
	{ans, contents, i},
	ans = New Namespace();
	contents = ns << Get Contents();
	// move contents to new namespace
	For( i = 1, i <= NItems( contents ), i++,
		If( N Items( contents[i] ) > 1,
			ans << Insert( contents[i][1], contents[i][2] )
		)
	);
	// remove symbols from existing ns
	ns << Remove( ns << Get Keys() );
	// return ref to anonymous ns
	ans;
);

// Function:  ut difference between lists
// Returns items in listB NOT in listA.
//
// Parameters:
//	   listA - Potentially smaller list than listB. Probably a subset of listB
//     listB - List that might have items not in listA.
//
// Returns:
//     Items in listB NOT in listA.
ut difference between lists = Function( {listA,listB},
	{default local},
	for( i=nitems( listB ), i >= 1, i--,
		If( Contains( listA, listB[i] ),
			Remove From( listB, i );
		)
	);
	listB;
);

/* 
	Function: ut get symbol information

	Returns:
		An associative array with information 
	
	Author:
		juchil
		
	History:
		17may18 - (juchil) Add windows and data tables.
*/
ut get symbol information = Function({},
	{default local},
	aa = [=>];
	If( ut major jmp version >= 15,
		aa["root"] = Namespace("root") << get keys();
	);
	aa["global"] = Namespace("global") << get keys();
	aa["here"] = Namespace("here") << get keys();
	aa["namespaces"] = Get Namespace Names();
	aa["classes"] = Get Class Names();
	aa["windows"] = Get Window List();
	aa;
);

/* 
	Function: ut delete symbols difference
		Deletes symbols in after list not in before list

	Parameters:
		before - associative array of symbols/namespaces/classes defined before a test file was run.
		after -  associative array of symbols/namespaces/classes defined after a test file was run.

	Author:
		juchil
		
	History:
		17may18 - (juchil) Add windows and data tables.
*/
ut delete symbols difference = Function({before, after, closeWindows=0},
	If( ut major jmp version >= 15,
		Namespace( "root" ) << Remove(
			::ut difference between lists( before["root"], after["root"] )
		);
	);
	
	Namespace( "global" ) << Remove(
		::ut difference between lists( before["global"], after["global"] )
	);
	
	Namespace( "here" ) << Remove(
		::ut difference between lists( before["here"], after["here"] )
	);
	
	Delete Namespaces( ::ut difference between lists( before["namespaces"], after["namespaces"] ) );
	
	Delete Classes( ::ut difference between lists( before["classes"], after["classes"] ) );
	
	If( closeWindows, 
		::ut difference between lists( before["windows"], after["windows"] ) << Close Window();
		Caption( Remove( 1 ) ); // Remove the caption if there is one.
	);
	
	// return null
	::ut nullptr;
);

// Variable: ut nullptr
// Can be used to supress printing anything to the log when returning from a function
ut nullptr = .;
Clear Globals( ut nullptr ); // Sets to nullptr

// Variable: ut major jmp version
ut major jmp version = Num( Word( 1, JMP Version(), "." ) );
