// Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Names Default to Here( 0 );

/*
	Class: UtTypedMatcher
		---Prototype---
		class UtTypedMatcher inherits UtMatcher
		---------------
		
		Base class to be used by matchers when the actual value 
		will be evaluted and needs to be of a specific type.
		
		Use <allowable types> to set the type that the test 
		expression should evaluate to.
*/
Define Class(
	"UtTypedMatcher",
	Base Class( UtMatcher ),

	// Variable: allowable types
	//    List of names of allowable types. To be overridden by subclass.
	//
	// Example: 
	//    > allowable types = {Matrix, Number, Integer};
	allowable types = {};
	
	// Variable: self
	//    Must be injected after class construction. Needed to reference base class methods.
	self = Empty();
	
	// Method: matches
	//    Evaluates the given test expression and returns a <UtMatchInfo> failure when
	//    the result is not an allowable type. Otherwise, it calls the typed matches
	//    method, which should be defined by the subclass.
	matches = Method( {test expr},
		actual = test expr;
		If( Contains( self:allowable types, As Name( Type( Name Expr( actual ) ) ) ),
			self << typed matches( Name Expr( actual ) );
		,
			mismatch = Eval Insert( "was ^ut get show string( Name Expr( actual ) )^ and type mismatch (Actual=^Type( Name Expr( actual ) )^, Expected=^this:format allowable types()^)" ); 
			ut match info failure( mismatch );
		)
	);
	
	// Method: typed matches
	//    To be overridden by subclass. Actual value is already evaluated
	//    test expression and can be assumed to be one of the allowable types.
	typed matches = Method( {actual}, Throw( "typed matches not implemented!" ) );
	
	// Method: format allowable types
	//    Format allowable types member variable to be separated  {Type 1, Type 2} to "Type 1 or Type 2".
	format allowable types = Method( {},
		str = "";
		n = N Items( self:allowable types );
		For( i = 1, i <= n, i++,
			str ||= Char( self:allowable types[i] );
			If( i < n,
				str ||= " or ";
			)
		);
		str;
	)
);

