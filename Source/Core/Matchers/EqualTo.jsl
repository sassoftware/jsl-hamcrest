// Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Names Default To Here( 0 );

/* 
	Class: UtEqualToMatcher
		---Prototype---
		class UtEqualToMatcher inherits UtMatcher
		---------------
		
		Operates only on values (not on matchers). Treats missing values
		as equal.

*/
Define Class(
	"UtEqualToMatcher",
	Base Class( UtMatcher ),
	value = Empty();
	matches = Method( {test expr},
		actual = test expr;
		If( !ut is comparable( Name Expr( actual ), Name Expr( this:value ) ),
				mismatch = Eval Insert( "was ^ut get show string( Name Expr( actual ) )^ and type mismatch (Actual=^Type( Name Expr( actual ) )^, Expected=^Type( Name Expr( this:value ) )^)" ); 
				::ut match info failure( mismatch );
		,
			// else
				this:matches value( Name Expr( actual ) );
		);
	);
	matches value = Method({actual},
		If( ut equal with missing( this:value, actual ),
			::ut match info success();
		,	
			mismatch = "was " || ut get show string( actual );
			::ut match info failure( mismatch );
		)
	);
	describe = Method( {},
		"equal to " || ut get show string( Name Expr( this:value ) )
	);
);

/* 
	Class: UtEqualToNumberMatcher
		---Prototype---
		class UtEqualToNumberMatcher inherits UtEqualToMatcher
		---------------
		
		Operates only on numbers/integers. See <UtEqualToMatcher>.
*/
Define Class(
	"UtEqualToNumberMatcher",
	Base Class( UtEqualToMatcher ),
	_init_ = Method({}, super:matches value = Name Expr( this:matches value ) );
	matches value = Method({actual},
		If( ut equal with missing( actual, this:value ),
			::ut match info success();
		,
			mismatch = "was " || Char( actual );
			LRE = ::ut global lre( actual, this:value );
			::ut match info failure( mismatch, LRE );
		);
	);
);

/* 
	Class: UtEqualToMatrixMatcher
		---Prototype---
		class UtEqualToMatrixMatcher inherits UtEqualToMatcher
		---------------
		
		Operates only on matrices.
*/
Define Class(
	"UtEqualToMatrixMatcher",
	Base Class( UtEqualToMatcher ),
	_init_ = Method({}, super:matches value = Name Expr( this:matches value ) );
	matches value = Method({actual},
		actualSize = Dim(actual);
		expectedSize = Dim(this:value);
		
		If( All(actualSize == expectedSize),
			actual missing = Is Missing( actual );
			expected missing = Is Missing( this:value );
			If( // both matrices have missing data in the same places
				All( actual missing == expected missing ) &
				// now just compare non missing values
				All( actual[Loc( !actual missing )] == this:value[Loc( !expected missing )]),
					::ut match info success();
			,
				// else matrices do not match
					mismatch = "was " || Char( actual );
					LRE = []|| ::ut global lre( actual, this:value );
					::ut match info failure( mismatch, LRE );
			);
		,
			mismatch = Eval Insert( "was ^Char( actual )^ and size mismatch (Actual=^actualSize^, Expected=^expectedSize^)" );
			::ut match info failure( mismatch );
		);
	);
);

/* 
	Class: UtEqualToListMatcher
		---Prototype---
		class UtEqualToListMatcher inherits UtEqualToMatcher
		---------------
		
		Operates only on lists.
*/
Define Class(
	"UtEqualToListMatcher",
	Base Class( UtEqualToMatcher ),
	_init_ = Method({}, super:matches value = Name Expr( this:matches value ) );
	matches value = Method({actual},
		actualSize = N Items( actual );
		expectedSize = N Items( this:value );
		
		If( actualSize == expectedSize,;
			If( this:value == actual,
				::ut match info success();
			,
				mismatch = "was " || Char( actual );
				::ut match info failure( mismatch );
			);
		,
			mismatch = Eval Insert( "was ^Char( actual )^ and N Items mismatch (Actual=^actualSize^, Expected=^expectedSize^)" );
			::ut match info failure( mismatch );
		);
	);
);

/* 
	Class: UtEqualToAssociativeArrayMatcher
		---Prototype---
		class UtEqualToAssociativeArrayMatcher inherits UtEqualToMatcher
		---------------
		
		Operates only on Associative Arrays. See <UtEqualToMatcher>.
*/
Define Class(
	"UtEqualToAssociativeArrayMatcher",
	Base Class( UtEqualToMatcher ),
	_init_ = Method({}, super:matches value = Name Expr( this:matches value ) );
	matches value = Method({actual},
		actualSize = N Items( actual );
		expectedSize = N Items( this:value );
		
		If( actualSize == expectedSize,;
			If( this:value == actual,
				::ut match info success();
			,
				mismatch = "was " || Char( actual );
				::ut match info failure( mismatch );
			);
		,
			mismatch = Eval Insert( "was ^Char( actual )^ and N Keys mismatch (Actual=^actualSize^, Expected=^expectedSize^)" );
			::ut match info failure( mismatch );
		);
	);
);

/* 
	Class: UtEqualToExpressionMatcher
		---Prototype---
		class UtEqualToExpressionMatcher inherits UtEqualToMatcher
		---------------
		
		Operates only on expressions. Uses == for equality See <UtEqualToMatcher>.
*/
Define Class(
	"UtEqualToExpressionMatcher",
	Base Class( UtEqualToMatcher ),
	_init_ = Method({}, super:matches value = Name Expr( this:matches value ) );
	matches value = Method({actual},
		If( Name Expr( actual ) == Name Expr( this:value ),
			::ut match info success();
		,
			mismatch = "was " || Char( Name Expr( actual ) );
			::ut match info failure( mismatch );
		);
	);
);

/*
	Class: UtEqualToClassMatcher
		---Prototype---
		class UtEqualToClassMatcher inherits UtEqualToMatcher
		---------------
		
		Operates only on Class objects. Uses == for instance equality. See <UtEqualToMatcher>.
*/
Define Class(
	"UtEqualToClassMatcher",
	Base Class( UtEqualToMatcher ),
	_init_ = Method({}, super:matches value = Name Expr( this:matches value ) );
	matches value = Method({actual},
		If( Name Expr( actual ) == this:value,
			::ut match info success();
		,
			mismatch = "was class " || Char( actual );
			::ut match info failure( mismatch );
		);
	);
);

/*
	Class: UtEqualToNamespaceMatcher
		---Prototype---
		class UtEqualToNamespaceMatcher inherits UtEqualToMatcher
		---------------
		
		Operates only on Namespace objects. Uses == message for contents equality. See <UtEqualToMatcher>.
*/
Define Class(
	"UtEqualToNamespaceMatcher",
	Base Class( UtEqualToMatcher ),
	_init_ = Method({}, super:matches value = Name Expr( this:matches value ) );
	matches value = Method({actual},
		If( Name Expr( actual ) == Name Expr( this:value ),
			::ut match info success();
		,
			mismatch = "was namespace " || Char( actual );
			::ut match info failure( mismatch );
		);
	);
);

/* 	
	Class: UtExpressionCompositeMatcher
		---Prototype---
		class UtExpressionCompositeMatcher inherits UtMatcher
		---------------
		
		Operates only on expressions.
		Compares expressions with wildcards and optional expression arguemnts.
		
		History:
		
			07MAY18/juchil - Update to accept any matcher instead of just wildcards. Still accepts ut optional(). Rename to UtExpressionCompositeMatcher.
*/
Define Class(
	"UtExpressionCompositeMatcher",
	Base Class( UtMatcher ),
	value = Empty();
	// Method: matches
	// 
	// Compares the test expr to the expected expression value, taking matchers and optional arguments into consideration.
	//
	// Returns:
	//
	// A match info of information about the success or failure
	matches = Method( {test expr},
		actual = test expr;
		If( !Is Expr( name expr( actual ) ),
			mismatch = Eval Insert( "was ^Char( Name Expr( actual ) )^" ); 
			Return( ::ut match info failure( mismatch ) );
		);
		valueTree = create tree( name expr( this:value ), 1 );
		
		actualTree = create tree( name expr( actual ), 0 );
		match info = compare trees( valueTree, actualTree );
		
		If( !match info:success, 
			match info:mismatch = Eval Insert( "^match info:mismatch^ within ^Char( Name Expr( actual ) )^" ); 
		);
		match info;
	);
	// Method: create tree
	//
	// Recursively creates a Tree Node() representation of the expression tree
	//
	// Returns:
	//
	// The root Tree Node() representing the expression tree.
	create tree = Method({rootExpr, isPattern},
		
		data = this:get expr data( name expr( rootExpr ), isPattern );
		
		tn = Tree Node();
		tn << set data( Name Expr( data ) );
		
		rootExpr = data["expression"];
		
		for( i = 1, i <= N Arg( rootExpr ), i++,
			tn << Append( create tree( arg( rootExpr, i ), isPattern ) )
		);
		// return the node
		tn;
	);
	// Method: get expr data
	//
	// Returns:
	//
	// An associative array of information about an expression node
	get expr data = Method( {rootExpr,isPattern},
		data = associative array();
		data["expression"] = name expr( rootExpr );
		data["head"] = head( rootExpr );
		
		If( isPattern,
			If( Is Expr( name expr( rootExpr ) ),
				
				If( Head( rootExpr ) == Expr( ut optional() ),
					data["required"] = 0;
					rootExpr = Arg( rootExpr, 1 );
					data["expression"] = name expr( rootExpr );
					data["head"] = head( rootExpr );
				,
					data["required"] = 1;
				);
				
				data["matcher"] = If( 
					Contains( ::ut matcher factories, Head( rootExpr ) ),
						rootExpr;
				,
					N Arg( rootExpr ) == 0,
						ut ensure matcher( Name Expr( rootExpr ) );
				,
					// else
						Empty();
				);
			,
				data["matcher"] = ut ensure matcher( Name Expr( rootExpr ) );
			);
		);
		
		// return the new expression and associated data
		data;
	);
	// Method: compare trees
	//
	// Recursively compare two Tree Node() representations of an expression tree
	//
	// Arguments:
	//
	// valueTree - root Tree Node() to compare against (with required flags and matchers)
	// actualTree - root Tree Node() to check
	compare trees = Method( {valueTree, actualTree},
		If( 
			Is Empty( valueTree ) & Is Empty( actualTree ),
				Return( ::ut match info success(); ),
			Is Empty( valueTree ) != Is Empty( actualTree ),
				Return( ::ut match info failure( "Unequal children" ); )
		);
		valueData = valueTree << Get Data;
		actualData = actualTree << Get Data;
		If( 
			ut is a matcher( valueData["matcher"] ),
				match info = valueData["matcher"]:matches( Insert( Expr( Expr() ), actualData["expression"] ) );
				
				If(  // Just in case we missed something (match info could be a missing value)
					!Is Class( match info ),
						match info = ut match info failure( "the " || (valueData["matcher"] << Get Name) || " failed to return success/failure info. the matcher itself is broken, not the test." );
				,
					!match info:success,
						match info:mismatch = " " || match info:mismatch || " but expected " || valueData["matcher"]:describe();
				);
				Return( match info );
		,
			valueData["head"] == actualData["head"],
				valueTreeChildCount = valueTree << Get Child Count;
				actualTreeChildCount = actualTree << Get Child Count;
				If( 
					valueTreeChildCount == 0,
						Throw( "Something didn't work....." );
				,
					valueTreeChildCount != actualTreeChildCount,
						Return( ::ut match info failure( Eval Insert( "\[/^Char( valueData["head"] )^ unequal number of arguments (Actual=^actualTreeChildCount^, Expected=^valueTreeChildCount^)]\" ) ) );
				);
				
				For( i=1,i <= valueTreeChildCount, i++,
					valueChild = valueTree << Get Child( i );
					actualChild = actualTree << Get Child( i );
					
					match info = this:compare trees( valueChild, actualChild );
					If( 
						match info:success == 0, // failed
							match info:mismatch = Eval Insert("\[/^Char( valueData["head"] )^[^Char( i )^]^match info:mismatch^]\" );
							Return( match info );
					,
						match info:success == -1, // failed, but was optional
							valueChild = valueChild << Sib();
					,
						// else
							actualChild = actualChild << Sib();
							valueChild = valueChild << Sib();
					);
				);
				Return( ::ut match info success() );
				
		,
			//else
				If( valueData["required"], 
					Return(  ::ut match info failure( Eval Insert( "\[ required head expressions did not match (Actual=^Char( actualData["head"] )^, Expected=^Char( valueData["head"] )^)]\" ) ) ), 
					Return( New Object( Ut Match Info( -1, "optional" ) ) )
				);
		);
		Throw( "should never reach here" );
		
	);
	// Method: describe
	//
	// Describe the expected outcome
	describe = Method( {},
		"equal to " || Char( Name Expr( this:value ) );
	);
);

// Section: Globals

/*
	Function: ut expression matches
		---Prototype---
		ut expression matches( expression value )
		---------------

		Compare the actual expression to and expected expression, which itself can
		contain matchers or optional tokens. This can be very useful for size arguments that
		change based on the machine settings/font size or if there is a small difference in 
		output between operating systems.
		
		This is the default matcher for expressions and and names which contain arguments.

		Factory function for <UtExpressionCompositeMatcher>.

	Arguments:
		value - an expression with inner matchers and/or optional tokens
		
	Tokens:
		ut optional( expr ) - Optionally matches given expression.

	Example:

	------------- JSL -------------
	ut assert that(
		Expr( gb << get script ),
		ut expression matches(
			Expr(
				Graph Builder(
					ut optional( size( ut  wild(), ut wild() ) ),
					Show ControlPanel( 0 ),
					Variables( X( :height ), Y( :weight ), Overlay( :sex ) ),
					Elements( Points( X, Y, Legend( 1 ) ), Smoother( X, Y, Legend( 2 ) ) )
				)
			)
		)
	);
	-------------------------------
	
	------------- JSL -------------
	ut assert that(
		Expr( {400, c( [1,5] ), x( z( "TEST", 1 ) )} ),
		ut expression matches(
			{ut less than( 500 ), c( [1,5] ), x( z( ut equal to ignoring case( "test" ), ut greater than( 0 ) ) )}
		)
	);
	-------------------------------
	> ut assert that( Expr( Expr( x << Get Name(); b = 10; c; ) ), ut expression matches( Expr( x << Get Name; b = 10; c; ) ) );
*/
ut matcher factory( "ut expression matches" );
ut expression matches = Function({valueExpression},
	{obj},
	obj = New Object( UtExpressionCompositeMatcher() );
	obj:value = Name Expr( valueExpression );
	obj;
);

/* 
	Function: ut equal to expression
		---Prototype---
		ut equal to expression( expression value )
		---------------
		Compares the expression using the built-in == operator. Available since
		ut equal to() matcher uses ut expression matches() by default.
		
		Factory function for <UtEqualToExpressionMatcher>.

	Arguments:
		value - should be an expression

	Examples:

		> ut assert that( Expr( Expr( 5 + 5 ) ), ut equal to expression( Expr( 5 + 5 ) ) );
*/
ut matcher factory( "ut equal to expression" );
ut equal to expression = Function({val},
	{obj},
	obj = New Object( UtEqualToExpressionMatcher() );
	obj:value = Name Expr( val );
	obj;
);

/* 	
	Function: ut equal to
		---Prototype---
		ut equal to( object value )
		---------------
		Compares objects to see if they are equal to each other. Expressions and 
		names with arguments default to the ut expression matches() matcher.
		
 		Factory function for <UtEqualToMatcher>.

 	Arguments:
		value - assumed to NOT be a matcher

 	Examples:
		> ut assert that( Expr( 5 + 5 ), ut equal to( 10 ) );
		> ut assert that( Expr( [1] || [1] ), ut equal to( [1 1] ) );
		> ut assert that( Expr( Associative Array( {{1,2}}) ), ut equal to( [1=>2] ) );
		> ut assert that( Expr( Expr( 5 + 5 ) ), ut equal to( Expr( 5 + 5 ) ) );
		> ut assert that( Expr( "test" || "string" ), ut equal to( "teststring" ) );
*/
ut matcher factory( "ut equal to" );
ut equal to = Function( {val},
	{obj},
	obj = Match( Type( Name Expr( val ) ),
		"Number",
			New Object( UtEqualToNumberMatcher() );
	,
		"Integer",
			New Object( UtEqualToNumberMatcher() );
	,
		"Matrix",
			New Object( UtEqualToMatrixMatcher() );
	,
		"List",
			New Object( UtEqualToListMatcher() );
	,
		"Associative Array",
			New Object( UtEqualToAssociativeArrayMatcher() );
	,
		"Expression",
			// only use the composite matcher if this expression has children
			If( NArg( val ) > 0,
				New Object( UtExpressionCompositeMatcher() ),
				New Object( UtEqualToExpressionMatcher() )
			);
	,
		"Name",
			// only use the composite matcher if this name has children
			If( NArg( val ) > 0,
				New Object( UtExpressionCompositeMatcher() ),
				New Object( UtEqualToExpressionMatcher() )
			);
	,
		"Function",
			New Object( UtEqualToExpressionMatcher() );
	,
		"Class",
			New Object( UtEqualToClassMatcher() );
	,
		"Namespace",
			New Object( UtEqualToNamespaceMatcher() )
	,
		// default
			New Object( UtEqualToMatcher() );
	);
	
	obj:value = Name Expr( val );
	obj;
);
