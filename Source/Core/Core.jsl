// Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Hamcrest for JSL (see hamcrest.org)
// Modeled after standard Java hamcrest and PyHamcrest
Names Default To Here( 0 );

Include( "MatchInfo.jsl" );
Include( "Utils.jsl" );

ut include jsl files recursively( "Matchers" );
ut include jsl files recursively( "Reporters" );

// Requires UtReporter (Reporters/Reporter) and ut ensure matcher (Utils)
Include( "TestCase.jsl" );

// Section: Globals

/* 
	Function: ut assert that
		---Prototype---
		ut assert that( expression test_expr, UtMatcher matcher, string label = "" )
		---------------
		Assertion function that accepts matchers to determine successes and failures.

	Returns:
		If the assertion passed (1) or failed (0)

	Prototype:
		> ut assert that( test expr, matcher | expected, <label> )

	Parameters:
		test_expr - value about which we are asserting
		matcher - does test expr satisify this matcher or expected value?
		label - extra information about this assertion (optional)

	Examples:
		----------JSL-----------
		// Without a matcher, it defaults to the ut equal to() matcher
		ut assert that( Expr( 5 + 5 ), 10 );
		// The above is equivalent to:
		ut assert that( Expr( 5 + 5 ), ut equal to( 10 ) );
		// Some matchers accept inner matchers
		ut assert that( Expr( Show( 5 + 5 ) ), ut log is( ut equal to ignoring whitespace( "5 + 5 = 10;" ) ) );
		------------------------  
*/
ut test register assertion( "ut assert that", {test expr, matcher, label=""} );
ut assert that = Function( {test expr, matcher, label = ""},
	// Move args to anonymous namespace to avoid collision
	local:_utAssertThatNS = ut move to anonymous namespace( Namespace( "local" ) );
	
	// Ensure that test expr is an expression
	// This is done more for safety than for necessity.
	//
	// If there is no test suite to capture any unexpected
	// throws, any throw escaping a call to ut assert that
	// (including the implicit evaluation of its arguments) will
	// end the entire test file and potentially skip a lot of
	// tests. Instead, we force the user to assert only on
	// expressions, limiting the chance of an throw escaping the
	// call to ut assert that.

	If( !Is Expr( Name Expr( _utAssertThatNS:test expr ) ),
		ut global reporter:add expression failure( Name Expr( _utAssertThatNS:label ) );
		Return( 0 );
	);
	
	_utAssertThatNS:matcher = ut ensure matcher( Name Expr( _utAssertThatNS:matcher ) );
	
	Try(
		// After the Matches method evaluates, we are no longer worried about variable collision
		// Use local to prevent symbols being evaluated unexpectedly ending up in the local namespace
		// if we were to define them in the locals list in the function definition.
		local:match info = _utAssertThatNS:matcher << Matches( Name Expr( _utAssertThatNS:test expr ) );
		local:thrown exception = Empty();
	,
		local:match info = ut match info failure( "" );
		local:thrown exception = ut get exception message( exception_msg );
	);
	
	// Just in case we missed something (match info could be a missing value)
	If( !Is Class( match info ),
		match info = ut match info failure( "the " || (_utAssertThatNS:matcher << Get Name) || " failed to return success/failure info. the matcher itself is broken, not the test." );
	);
	
	First(
		If( !(match info << Is Success()),
			If( Is Empty( thrown exception ),
				ut global reporter:add failure(
					Name Expr( _utAssertThatNS:label ),
					Name Expr( _utAssertThatNS:test expr ),
					_utAssertThatNS:matcher << Describe(),
					match info << Get Mismatch(),
					match info << Get LRE()
				);
				0;
			,
				ut global reporter:add unexpected throw(
					Name Expr( _utAssertThatNS:label ),
					Name Expr( _utAssertThatNS:test expr ),
					_utAssertThatNS:matcher << Describe(),
					thrown exception
				);
				0;
			);
		,
			ut global reporter:add success( 
				Name Expr( _utAssertThatNS:label ), 
				Name Expr( _utAssertThatNS:test expr ),
				_utAssertThatNS:matcher << Describe()
			);
			1;
		),
		Delete Namespaces( Force( 1 ), _utAssertThatNS );
	);
	
);

/*	Function: ut assert value
		Assertion function that allows evaluation of test values
		to take place at call site rather than within the matchers.
		This means that the <ut throws> and <ut no throw> matchers
		should not be used with ut assert value.
		
		This function is helpful when you are not worried about 
		error catching and want to reduce the risk of name 
		resolution issues due to being evaluated within a matcher.
		
		It is recommended to only use ut assert value within 
		a <ut test> body so that errors are caught and you do 
		not experience errors that prevent other tests from 
		being run.
		
		ut assert value created to address issue #46
	
	Arguments:
		val - an already evaluated value that will be used within 
		      a matcher literally
		matcher - matcher object
		label - label for this assertion
*/
ut assert value = Function( {val, matcher, label=""},
	ut assert that( ut expr literal( Name Expr( val ) ), Name Expr( matcher ), Name Expr( label ) );
);

// Constant: ut global reporter
//
// Redefine ut global reporter to customize how assert successes
// and failures are reported when using ut assert that. 
If( Is Empty( ut global reporter ),
	ut global reporter = ut reporter();
);
