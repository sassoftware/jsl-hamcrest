// TODO:
// - get exception message/expression
// - extract thrown string
// - object supports message
// - concat test label
// - merge expressions

ut test( "Utils", "IsMatcherTrueWithMatcher", Expr(
    m = ut equal to( 5 );
    ut assert that( Expr( ut is a matcher( m ) ), 1 );
));

ut test( "Utils", "IsMatcherFalseWithReporter", Expr(
    reporter = New Object( "UtReporter" );
    ut assert that( Expr( ut is a matcher( reporter ) ), 0 );
));

ut test( "Utils", "IsMatcherFalseWithNumber", Expr(
    ut assert that( Expr( ut is a matcher( 5 ) ), 0 );
));

ut test( "Utils", "EnsureMatcherConvertsValueToEqualTo", Expr(
    ut assert that( Expr( ut ensure matcher( 5 ) ), ut instance of( "UtEqualToNumberMatcher" ) );
));

ut test( "Utils", "EnsureMatcherPreservesMatcher", Expr(
    ut assert that( Expr( ut ensure matcher( ut contains( 5 ) ) ), ut instance of( "UtContainsMatcher" ) );
));

ut test( "Utils", "EnsureMatcherList", Expr(
    ut assert that( 
        Expr( ut ensure matcher list( {5, ut contains( 5 )} ) ),
        ut expression matches(
            {ut instance of( "UtEqualToNumberMatcher" ), ut instance of( "UtContainsMatcher" )}
        )
    );
));

ut test( "Utils", "LreWithNumbers", Expr(
    ut assert that( Expr( ut global lre( 1, 5 ) ), ut approx( 0.0969100130080564 ) );
    ut assert that( Expr( ut global lre( 654.4, 654.5 ) ), ut approx( 3.81590965088668 ) );
));

ut test( "Utils", "LreWithMatrices", Expr(
    ut assert that( Expr( ut global lre( [1 2], [5 6] ) ), ut approx( [0.0969100130080564 0.176091259055681] ) );
    ut assert that( Expr( ut global lre( [3.2 654.4], [3.5 654.5] ) ), ut approx( [1.06694678963061 3.81590965088668] ) );
));

ut test( "Utils", "IsComparable", Expr(
    ut assert that( Expr( ut is comparable( 1, 1.0 ) ), 1, "numbers and integers are comparable" );
    ut assert that( Expr( ut is comparable( Expr( Print ), Expr( Print() ) ) ), 1, "expressions and names are comparable" );
    ut assert that( Expr( ut is comparable( "foo", "bar" ) ), 1, "same type are comparable" );
    ut assert that( Expr( ut is comparable( "foo", 5 ) ), 0, "different types not comparable" );
));

ut test( "Utils", "IsNumericMissing", Expr(
    ut assert that( Expr( ut is numeric missing( . ) ), 1 );
    ut assert that( Expr( ut is numeric missing( 5 ) ), 0 );
    ut assert that( Expr( ut is numeric missing( "foo" ) ), 0 );
));

ut test( "Utils", "IsEqualWithMissing", Expr(
    ut assert that( Expr( ut equal with missing( ., . ) ), 1 );
    ut assert that( Expr( ut equal with missing( 5, . ) ), 0 );
    ut assert that( Expr( ut equal with missing( Empty(), Empty() ) ), 1 );
    ut assert that( Expr( ut equal with missing( 1, Empty() ) ), 0 );
    ut assert that( Expr( ut equal with missing( 1, 1.0 ) ), 1 );
));

ut test( "Utils", "GetShowString", Expr(
    ut assert that( Expr( ut get show string( Text Box() ) ), "DisplayBox[TextBox]" );
    ut assert that( Expr( ut get show string( "foo" ) ), "\["foo"]\" );
));

ut test( "Utils", "DetailedType", Expr(
    ut assert that( Expr( ut detailed type( Text Box() ) ), "DisplayBox[TextBox]" );
    ut assert that( Expr( ut detailed type( [1 2, 3 4, 5 6] ) ), "Matrix[2x3]" );
    ut assert that( Expr( ut detailed type( {10, 20} ) ), "List[2]" );
));

ut test( "Utils", "AsExpr", Expr(
    ut assert that( Expr( ut as expr( 5 ) ), ut typed as( "Expression" ) );
));

ut test( "Utils", "ExprLiteral", Expr(
    add expr = Expr( 5 + 5 );
    ut assert that( Expr( ut expr literal( Name Expr( add expr ) ) ), Expr( Expr( 5 + 5 ) ) );
));

ut test( "Utils", "MoveToAnonymousNamespace", Expr(
    ns = New Namespace();
    ns:x = 5;
    anon ns = ut move to anonymous namespace( ns );
    ut assert that( Expr( ns << Get Contents ), {}, "nothing in original namespace" );
    ut assert that( Expr( anon ns << Get Contents ), {{"x", 5}}, "original ns contents made it" );
    ut assert that( Expr( anon ns << Get Name ), ut starts with( "#" ), "# means anonymous");
));

ut test( "Utils", "DifferenceBetweenLists", Expr(
    ut assert that( 
        Expr( ut difference between lists( {1, 2}, {2, 1, 3} ) ),
        {3}
    );
));

ut test( "Utils", "DeleteSymbolsDifferenceDeletesNamespaces", Expr(
    ns = .; // preserve symbol
    before = ut get symbol information();
    ns = New Namespace();
    after = ut get symbol information(); 
    ut assert that( Expr( after["namespaces"] ), ut contains( ns << Get Name ) );
    ut delete symbols difference( before, after );
    after delete = ut get symbol information();
    ut assert that( Expr( after delete["namespaces"] ), ut not( ut contains( ns << Get Name ) ) );
));
