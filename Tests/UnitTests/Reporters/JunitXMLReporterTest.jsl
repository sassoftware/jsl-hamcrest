// Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0 

n root tests = Function({xml}, {out = .},
	Parse XML(xml, On Element("testsuites", Start Tag(local:out = Num(Xml Attr("tests")))));
	local:out
);

n root failures = Function({xml}, {out = .},
	Parse XML(xml, On Element("testsuites", Start Tag(local:out = Num(Xml Attr("failures")))));
	local:out
);

suite names = Function({xml}, {out = {}},
	Parse XML(xml, On Element("testsuite", Start Tag(Insert Into(local:out, Xml Attr("name")))));
	local:out
);

setup_expr = Expr(
    //include("../../../Source/Reporters/JunitXMLReporter.jsl");
    reporter = ut junit xml reporter();
    with junit reporter = Function({ex},
        ut with reporter( reporter, Name Expr( ex ) );	
    );
    outer assert value = Function({value, matcher, label=""},
        // Circumvent the decorated `ut assert that` from our own 'JunitXMLReporters' case.
        // This allows us to write assertions that are reported as outside of any test.
        ::ut assert that(ut as expr(Name Expr(value)), matcher, label);
    );
    report = Expr(reporter << get report);
);
	
JunitXMLReporters = ut test case("JunitXMLReporters")
	<< Setup(Expr(setup_expr));

ut test(JunitXMLReporters, "Factory return correct type", Expr(
	ut assert that( Expr(reporter), ut instance of("UtJunitXMLReporter") );
));

ut test(JunitXMLReporters, "No assertions gives valid xml", Expr(
	ut assert that( Expr(report), ut all of({ut valid xml(), ut not("")}) );
));

ut test(JunitXMLReporters, "Single passing assertion gives valid xml", Expr(
	with junit reporter(Expr(
		outer assert value(1, 1);
	));
	ut assert that( Expr(report), ut valid xml() );
));

ut test(JunitXMLReporters, "Single failing assertion gives valid xml", Expr(
	with junit reporter(Expr(
		outer assert value(1, 2);

	));
	ut assert that( Expr(report), ut valid xml() );
));

ut test(JunitXMLReporters, "Test case gives valid xml", Expr(
	with junit reporter(Expr(
		ut test("A", "a", Expr(
			ut assert value(1, 0);
		));
	));
	ut assert that( Expr(report), ut valid xml() );
));

ut test(JunitXMLReporters, "Quotes in label gives valid xml", Expr(
	with junit reporter(Expr(
		outer assert value(1, 0, "quotes may cause \!"trouble\!" if not escaped");
	));
	ut assert that( Expr(report), ut valid xml() );
));

ut test(JunitXMLReporters, "Angle brackets in failure gives valid xml", Expr(
	with junit reporter(Expr(
		outer assert value("brackets", "brackets may cause <<trouble>> if not escaped");
	));
	ut assert that( Expr(report), ut valid xml() );
));

ut test(JunitXMLReporters, "Unexpected throws are treated as failures", Expr(
	// There may be some room for improvement here. I think there may be a
	// separate mechanism for reporting these.
	with junit reporter(Expr(
		ut test("A", "a", Expr(
			Throw("I am unexpected!");
		));
	));
	ut assert that( Expr(report), ut valid xml() );
	ut assert that( Expr(n root tests(report)), 1 );
	ut assert that( Expr(n root failures(report)), 1 );
));

ut test(JunitXMLReporters, "Counts are correct at root", Expr(
	with junit reporter(Expr(
		outer assert value(1, 1);
		outer assert value(2, 0);
		ut test("A", "a", Expr(
			ut assert value(3, 3);
			ut assert value(4, 0);
		));
		ut test("A", "1", Expr(
			ut assert value(5, 5);
			ut assert value(6, 0);
		));
		ut test("B", "b", Expr(
			ut assert value(7, 7);
			ut assert value(8, 0);
		));
	));
	ut assert that( Expr(n root tests(report)), 8 );
	ut assert that( Expr(n root failures(report)), 4 );
	ut assert that( Expr(suite names(report)), {"A", "Anonymous_Test_Suite", "B"} );
));

// Unit test cases for JunitXMLReporter

// 1.0 JunitXMLReporter one simple passing
// 2.0 JunitXMLReporter one simple failing

// uncomment to reinitialize and reinclude source file
//init_framework = convert file path("$ADDIN_HOME(com.jmp.jslhamcrest)\Source\Addin\Actions\InitializeFramework.jsl");
//include(init_framework);
//include("../../../Source/Reporters/JunitXMLReporter.jsl");

// 1.0 JunitXMLReporter one simple passing

ut test( JunitXMLReporters, "JunitXMLReporter one simple passing", Expr(
	reporter  = New Object("UtJunitXMLReporter");
	reporter << add success("Simple Pass ⮚ One plus one equals two ⮚ 1", 1 + 1, "equal to 2", Empty());
	ut assert that(Expr(reporter << successes), ut equal to ({{"Simple Pass ⮚ One plus one equals two ⮚ 1", 2, "equal to 2", Empty()}}));

	// Example test that would produce the success shown above
	// ut test ("Simple Pass", "One plus one equals two", Expr(
	//   ut assert that(Expr(1+1), ut equal to (2));
	// ));
	
	report_text = Log Capture(reporter << show report);
	
	pattern = 
	"\[<\?xml version="1.0" encoding="UTF-8" \?>
	<testsuites failures="0" id="\d+_\d+" tests="1">
	  <testsuite failures="0" name="Simple Pass" tests="1">
		<testcase name="One plus one equals two_1">
		</testcase>
	  </testsuite>
	</testsuites>
	]\";
	
	//replace tabs and carriage returns used for easier readability
	pattern = Substitute(pattern, "\!N", ".+", "\!r", ".+", "\!t", "");

	match = Regex Match(report_text, pattern);
	
	ut assert that(Expr(match), ut length(1));
	
	ut assert that(Expr(match[1]), ut equal to(report_text));
));

// 2.0 JunitXMLReporter one simple failing

ut test( JunitXMLReporters, "JunitXMLReporter one simple failing", Expr(
	reporter  = New Object("UtJunitXMLReporter");
	reporter << add failure("Simple Fail ⮚ One plus one equals one ⮚ 1", 1 + 1, "equal to 1", "was 2", 0, Empty());
	ut assert that(Expr(reporter << failures), ut equal to ({{"Simple Fail ⮚ One plus one equals one ⮚ 1", 2, "equal to 1", "was 2", 0, Empty()}}));
	
	// Example test that would produce the failure shown above
	// ut test ("Simple Fail", "One plus one equals one", Expr(
	//   ut assert that(Expr(1+1), ut equal to (1));
	// ));

	report_text = Log Capture(reporter << show report);
	
	pattern = 
	"\[<\?xml version="1.0" encoding="UTF-8" \?>
	<testsuites failures="1" id="\d+_\d+" tests="1">
	  <testsuite failures="1" name="Simple Fail" tests="1">
		<testcase name="One plus one equals one_1">
		  <failure type="failure">
			Expected: 2 equal to 1
			But: was 2
		  </failure>
		</testcase>
	  </testsuite>
	</testsuites>
	]\";
	
	//replace tabs and carriage returns used for easier readability
	pattern = Substitute(pattern, "\!N", ".+", "\!r", ".+", "\!t", "");

	match = Regex Match(report_text, pattern);
	
	ut assert that(Expr(match), ut length(1));
	
	ut assert that(Expr(match[1]), ut equal to(report_text));
));

