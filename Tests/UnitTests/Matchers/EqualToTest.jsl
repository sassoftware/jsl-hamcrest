// Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Base EqualToMatcher using strings
ut test( "EqualToMatcher", "Mismatch", Expr(
	mi = ut equal to( "EXPECTED" ) << Matches( "ACTUAL" );
	ut assert that( Expr( mi:mismatch ), "was \!"ACTUAL\!"" );
));

ut test( "EqualToMatcher", "Describe", Expr(
	m = ut equal to( "EXPECTED" );
	ut assert that( Expr( m << Describe ), "equal to \!"EXPECTED\!"" );
));

ut test( "EqualToMatcher", "MatchInfoSuccess", Expr(
	mi = ut equal to( "ACTUAL" ) << Matches( "ACTUAL" );
    ut assert that( Expr( mi ), ut instance of( "UtMatchInfo" ) );
	ut assert that( Expr( mi:success ), 1 );
));

ut test( "EqualToMatcher", "MatchInfoFailure", Expr(
	mi = ut equal to( "EXPECTED" ) << Matches( "ACTUAL" );
	ut assert that( Expr( mi ), ut instance of( "UtMatchInfo" ) );
	ut assert that( Expr( mi:success ), 0 );
));

ut test( "EqualToMatcher", "MatcherFactory", Expr(
	m = ut equal to( "EXPECTED" );
	ut assert that( Expr( m ), ut instance of( "UtEqualToMatcher" ) );
));

ut test( "EqualToMatrixMatcher", "TwoEmptyMatricesAreEqual", Expr(
	matcher = ut equal to( [] );
	match info = matcher << Matches( [] );
	ut assert value( match info:success, 1 );
));

ut test( "EqualToMatcher", "Handles Strings", Expr(
	ut assert value("abc", ut equal to("abc"));
	ut assert value("abc", ut not(ut equal to("ab")));
	ut assert value("abc", ut not(ut equal to("ABC")));
	ut assert value("abc", ut not(ut equal to("abcdef")));
));

ut test( "EqualToMatcher", "Handles Strings With Children (#88)", Expr(
	ut assert value("abc"(1, 2, 3), ut equal to("abc"(1, 2, 3)));
	ut assert value("abc"(1, 2, 3), ut not(ut equal to(Expr("ab"(1, 2, 3)))));
	ut assert value("abc"(1, 2, 3), ut not(ut equal to(Expr("abc"(4, 5)))));
));

ut test( "LessThanOrEqualToMatcher", "Fails with Matrix (#135)", Expr(
	matcher = ut less than or equal to(3);
	match info = matcher << Matches( 1::3 );
	ut assert value(match info << get mismatch, ut equal to("was non-scalar [1 2 3]"));
));

// TODO: Other EqualToMatcher subclasses
