// Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// ------------------------------------ ut title ------------------------------------
ut test( "TitleMatcher", "Mismatch", Expr(
	mi = ut title( "hello" ) << Matches( Outline Box( "world" ) );
	ut assert that( Expr( mi:mismatch ), "\[DisplayBox[OutlineBox] << Get Title was "world"]\" );
));

ut test( "TitleMatcher", "Describe", Expr(
	m = ut title( "hello" );
	ut assert that( Expr( m << Describe ), "\[title equal to "hello"]\" );
));

ut test( "TitleMatcher", "MatchInfoSuccess", Expr(
	mi = ut title( "hello" ) << Matches( Outline Box( "hello" ) );
    ut assert that( Expr( mi ), ut instance of( "UtMatchInfo" ) );
	ut assert that( Expr( mi:success ), 1 );
));

ut test( "TitleMatcher", "MatchInfoFailure", Expr(
	mi = ut title( "hello" ) << Matches( Outline Box( "world" ) );
    ut assert that( Expr( mi ), ut instance of( "UtMatchInfo" ) );
	ut assert that( Expr( mi:success ), 0 );
));

ut test( "TitleMatcher", "MatcherFactory", Expr(
	m = ut title( "hello" );
    ut assert that( Expr( m ), ut instance of( "UtMessageMatcher" ) );
    ut assert that( Expr( m:message ), "Get Title" );
    ut assert that( Expr( m:description ), "title");
));


// ------------------------------------ ut text ------------------------------------
ut test( "TextMatcher", "Mismatch", Expr(
	mi = ut text( "hello" ) << Matches( Text Box( "world" ) );
	ut assert that( Expr( mi:mismatch ), "\[DisplayBox[TextBox] << Get Text was "world"]\" );
));

ut test( "TextMatcher", "Describe", Expr(
	m = ut text( "hello" );
	ut assert that( Expr( m << Describe ), "\[text equal to "hello"]\" );
));

ut test( "TextMatcher", "MatchInfoSuccess", Expr(
	mi = ut text( "hello" ) << Matches( Text Box( "hello" ) );
    ut assert that( Expr( mi ), ut instance of( "UtMatchInfo" ) );
	ut assert that( Expr( mi:success ), 1 );
));

ut test( "TextMatcher", "MatchInfoFailure", Expr(
	mi = ut text( "hello" ) << Matches( Text Box( "world" ) );
    ut assert that( Expr( mi ), ut instance of( "UtMatchInfo" ) );
	ut assert that( Expr( mi:success ), 0 );
));

ut test( "TextMatcher", "MatcherFactory", Expr(
	m = ut text( "hello" );
    ut assert that( Expr( m ), ut instance of( "UtMessageMatcher" ) );
    ut assert that( Expr( m:message ), "Get Text" );
    ut assert that( Expr( m:description ), "text");
));


// ------------------------------------ ut enabled ------------------------------------
ut test( "EnabledMatcher", "Mismatch", Expr(
	mi = ut enabled( 0 ) << Matches( Text Box( "world" ) );
	ut assert that( Expr( mi:mismatch ), "\[DisplayBox[TextBox] << Get Enabled was 1]\" );
));

ut test( "EnabledMatcher", "Describe", Expr(
	m = ut enabled( 0 );
	ut assert that( Expr( m << Describe ), "\[enabled equal to 0]\" );
));

ut test( "EnabledMatcher", "MatchInfoSuccess", Expr(
	mi = ut enabled( 1 ) << Matches( Text Box( "hello" ) );
    ut assert that( Expr( mi ), ut instance of( "UtMatchInfo" ) );
	ut assert that( Expr( mi:success ), 1 );
));

ut test( "EnabledMatcher", "MatchInfoFailure", Expr(
	mi = ut enabled( 0 ) << Matches( Text Box( "world" ) );
    ut assert that( Expr( mi ), ut instance of( "UtMatchInfo" ) );
	ut assert that( Expr( mi:success ), 0 );
));

ut test( "EnabledMatcher", "MatcherFactory", Expr(
	m = ut enabled( 0 );
    ut assert that( Expr( m ), ut instance of( "UtMessageMatcher" ) );
    ut assert that( Expr( m:message ), "Get Enabled" );
    ut assert that( Expr( m:description ), "enabled");
));


// ------------------------------------ ut class name ------------------------------------
ut test( "ClassNameMatcher", "Mismatch", Expr(
	mi = ut class name( "Foo" ) << Matches( Text Box( "world" ) );
	ut assert that( Expr( mi:mismatch ), "\[DisplayBox[TextBox] << Class Name was "TextBox"]\" );
));

ut test( "ClassNameMatcher", "Describe", Expr(
	m = ut class name( "Foo" );
	ut assert that( Expr( m << Describe ), "\[class name equal to "Foo"]\" );
));

ut test( "ClassNameMatcher", "MatchInfoSuccess", Expr(
	mi = ut class name( "TextBox" ) << Matches( Text Box( "hello" ) );
    ut assert that( Expr( mi ), ut instance of( "UtMatchInfo" ) );
	ut assert that( Expr( mi:success ), 1 );
));

ut test( "ClassNameMatcher", "MatchInfoFailure", Expr(
	mi = ut class name( "Foo" ) << Matches( Text Box( "world" ) );
    ut assert that( Expr( mi ), ut instance of( "UtMatchInfo" ) );
	ut assert that( Expr( mi:success ), 0 );
));

ut test( "ClassNameMatcher", "MatcherFactory", Expr(
	m = ut class name( "Foo" );
    ut assert that( Expr( m ), ut instance of( "UtMessageMatcher" ) );
    ut assert that( Expr( m:message ), "Class Name" );
    ut assert that( Expr( m:description ), "class name");
));


// ------------------------------------ ut name ------------------------------------
ut test( "TextMatcher", "Mismatch", Expr(
	mi = ut name( "Bar" ) << Matches( New Namespace( "Foo" ) );
	ut assert that( Expr( mi:mismatch ), "\[Namespace[Foo] << Get Name was "Foo"]\" );
));

ut test( "TextMatcher", "Describe", Expr(
	m = ut name( "Foo" );
	ut assert that( Expr( m << Describe ), "\[name equal to "Foo"]\" );
));

ut test( "TextMatcher", "MatchInfoSuccess", Expr(
	mi = ut name( "Foo" ) << Matches( New Namespace( "Foo" ) );
    ut assert that( Expr( mi ), ut instance of( "UtMatchInfo" ) );
	ut assert that( Expr( mi:success ), 1 );
));

ut test( "TextMatcher", "MatchInfoFailure", Expr(
	mi = ut name( "Bar" ) << Matches( New Namespace( "Foo" ) );
    ut assert that( Expr( mi ), ut instance of( "UtMatchInfo" ) );
	ut assert that( Expr( mi:success ), 0 );
));

ut test( "TextMatcher", "MatcherFactory", Expr(
	m = ut name( "Foo" );
    ut assert that( Expr( m ), ut instance of( "UtMessageMatcher" ) );
    ut assert that( Expr( m:message ), "Get Name" );
    ut assert that( Expr( m:description ), "name");
));
