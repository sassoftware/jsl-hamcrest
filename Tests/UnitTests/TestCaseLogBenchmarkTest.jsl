// Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

Log Benchmark = ut test case("Log Benchmark")
	<<Setup(Expr(
		reporter = ut mock reporter();
	))
	<<Teardown(Expr(
		reporter << Verify Expectations;
	));

ut test(Log Benchmark, "Log Bench Default Does Not Capture Log", Expr(
	old default = ut log bench default;
	ut log bench default = -1; // default default
	log = Log Capture(rc = ut with reporter(reporter, Expr(
		ut test("case", "name", Expr(Print("stuff")));
	)));
	ut log bench default = old default;
	ut assert that(Expr(rc), 1);
	ut assert that(Expr(log), ut ignoring whitespace("\["stuff"]\"));
));

ut test(Log Benchmark, "Log Bench Off Captures and Ignores Logging", Expr(
	log = Log Capture(rc = ut with reporter(reporter, Expr(
		ut test("case", "name", Expr(Print("stuff")), ut log bench(0));
	)));
	ut assert that(Expr(rc), 1);
	ut assert that(Expr(log), "");
));

ut test(Log Benchmark, "Log Bench On Captures And Asserts Empty Log", Expr(
	reporter << Expect Call(Expr(add failure(ut wild, ut wild, ut wild, ut wild, ut wild, ut wild)));
	log = Log Capture(rc = ut with reporter(reporter, Expr(
		ut test("case", "name", Expr(Print("stuff")), ut log bench(1));
	)));
	ut assert that(Expr(rc), 0);
	ut assert that(Expr(log), "");
));

ut test(Log Benchmark, "Log Bench Default Can Be Changed", Expr(
	old default = ut log bench default;
	ut log bench default = 0;
	log = Log Capture(rc = ut with reporter(reporter, Expr(
		ut test("case", "name", Expr(Print("stuff")) /*no log bench specified*/);
	)));
	ut log bench default = old default;
	ut assert that(Expr(rc), 1);
	ut assert that(Expr(log), "");
));

ut test(Log Benchmark, "Log Bench On Does Not Report Successes", Expr(
	rc = ut with reporter(reporter, Expr(
		ut test("case", "name", Expr(Write("stuff")), ut log bench(1, "stuff"));
	));
	ut assert that(Expr(rc), 1);
));

ut test(Log Benchmark, "Log Bench On Can Assert On Exact Log", Expr(
	reporter << Expect Call(Expr(add failure(ut wild, ut wild, ut wild, ut wild, ut wild, ut wild)));
	rc = ut with reporter(reporter, Expr(
		ut test("case", "name", Expr(Write("stuff")), ut log bench(1, "other stuff"));
	));
	ut assert that(Expr(rc), 0);
));

ut test(Log Benchmark, "Log Bench On Can Use a Matcher And Succeed", Expr(
	rc = ut with reporter(reporter, Expr(
		ut test("case", "name", Expr(Write("stuff")), ut log bench(1, ut contains("tuf")));
	));
	ut assert that(Expr(rc), 1);
));

ut test(Log Benchmark, "Log Bench On Can Use a Matcher And Fail", Expr(
	reporter << Expect Call(Expr(add failure(ut wild, ut wild, ut wild, ut wild, ut wild, ut wild)));
	rc = ut with reporter(reporter, Expr(
		ut test("case", "name", Expr(Write("stuff")), ut log bench(1, ut ignoring whitespace("stu")));
	));
	ut assert that(Expr(rc), 0);
));

ut test(Log Benchmark, "Log Bench On Can Use a Matcher And Fail", Expr(
	old label gen = Name Expr(ut test log benchmark label);
	ut test log benchmark label = Function({c, n}, "my " || c || " " || n);
	reporter << Expect Call(Expr(add failure("my case name", ut wild, ut wild, ut wild, ut wild, ut wild)));
	rc = ut with reporter(reporter, Expr(
		ut test("case", "name", Expr(Write("stuff")), ut log bench(1));
	));
	ut test log benchmark label = Name Expr(old label gen);
));