// Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

with noop reporter = Function( {ex},
    ut with reporter( ut reporter(), Name Expr( ex ) );
);

Define Class("UtMockReporter",
	Base Class(UtReporter),
	_init_ = Method({},
		this:self = Empty();
		this:calls = {};
		this:expectations = {};
	);
	Expect Call = Method({exp},
		Insert Into(this:expectations, Name Expr(exp));
		this:self
	);
	Verify Expectations = Method({},
		ut assert that(this:calls, ut expression matches(this:expectations));
	);
	
	add expression failure = Method( {label, payload=Empty()},
		Insert Into(this:calls, Eval Expr(add expression failure(Expr(Name Expr(label)), Expr(Name Expr(payload)))));
	);
	add failure = Method( {label, test expr, description, mismatch, lre, payload=Empty()},
		Insert Into(this:calls, Eval Expr(add failure(Expr(Name Expr(label)), Expr(Name Expr(test expr)), Expr(Name Expr(description)), Expr(Name Expr(mismatch)), Expr(Name Expr(lre)), Expr(Name Expr(payload)))));
	);
	add unexpected throw = Method( {label, test expr, description, exception, payload=Empty()},
		Insert Into(this:calls, Eval Expr(add unexpected throw(Expr(Name Expr(label)), Expr(Name Expr(test expr)), Expr(Name Expr(description)), Expr(Name Expr(exception)), Expr(Name Expr(payload)))));
	);
	add success = Method( {label, test expr, description, payload=Empty()},
		Insert Into(this:calls, Eval Expr(add success(Expr(Name Expr(label)), Expr(Name Expr(test expr)), Expr(Name Expr(description)), Expr(Name Expr(payload)))));
	);
);

ut mock reporter = Function({}, {obj},
	obj = New Object("UtMockReporter");
	obj:self = reporter;
	obj
);

Local({files, iFile, includeExprs={}},
	files = Files In Directory( "UnitTests", "recursive" );
	For( iFile = 1, iFile <= N Items( files ), iFile++,
		Insert Into( includeExprs, Eval Expr( Include( Expr( "UnitTests/" || files[iFile] ) ) ) );
	);
    // Eval after loop to avoid name collisions 
    // with files and iFile.
    Eval List( includeExprs );
    ut nullptr; // To prevent echo to log
);