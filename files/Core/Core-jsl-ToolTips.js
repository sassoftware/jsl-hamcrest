NDContentPage.OnToolTipsLoaded({49:"<div class=\"NDToolTip TFunction LJSL\"><div id=\"NDPrototype49\" class=\"NDPrototype NoParameterForm\">ut no <span class=\"SHKeyword\">throw</span>()</div><div class=\"TTSummary\">Returns success if evaluated test expr does not throw. This is often unnecessary since an unexpected throw is treated as an failure. However, this can be useful if you specifically want to test that there is no throw and don\'t care about the result.</div></div>",177:"<div class=\"NDToolTip TFunction LJSL\"><div id=\"NDPrototype177\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">ut <span class=\"SHKeyword\">throws</span>(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">UtMatcher&nbsp;</td><td class=\"PName last\">matcher&nbsp;</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Captures a thrown message from evaluating the actual expression.&nbsp; Inner matchers can be used to assert on the actual error message.&nbsp; The error message comes from the first argument in the exception_msg variable, and not from the log.</div></div>",244:"<div class=\"NDToolTip TClass LJSL\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype244\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">UtMatcher</div></div></div><div class=\"TTSummary\">Base class for all matchers. If a function requires a matcher as an argument, it can be either an explicit matcher or a literal value. The literal value will be converted to an equal to matcher.</div></div>"});